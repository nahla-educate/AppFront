{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let LoginComponent = class LoginComponent {\n  constructor(router, service) {\n    this.router = router;\n    this.service = service;\n    this.type = \"password\";\n    this.isText = false;\n    this.eyeIcon = \"fa-eye-slash\";\n    this.userMail = \"\";\n    this.userPassword = \"\";\n  }\n  ngOnInit() {}\n  hideShowPass() {\n    this.isText = !this.isText;\n    this.isText ? this.eyeIcon = \"fa-eye\" : this.eyeIcon = \"fa-eye-slash\";\n    this.isText ? this.type = \"text\" : this.type = \"password\";\n  }\n  login(loginForm) {\n    const authData = {\n      userMail: this.userMail,\n      userPassword: this.userPassword\n    };\n    this.service.login(authData).subscribe(response => {\n      console.log(response);\n      if (response.message === \"Email not exists\") {\n        alert(\"Email not exists\");\n      } else if (response.message === \"Login Success\") {\n        // Save the token in localStorage and sessionStorage\n        localStorage.setItem('token', response.token);\n        sessionStorage.setItem('token', response.token);\n        // You can also store other user-related data if you receive them in the response\n        // For example, to store the user's email:\n        localStorage.setItem('userEmail', authData.userMail);\n        sessionStorage.setItem('userEmail', authData.userMail);\n        this.router.navigateByUrl('/register'); // Navigate to the desired page after successful login\n      } else {\n        alert(\"Incorrect email or password\");\n      }\n    }, error => {\n      console.error('Error authenticating user:', error);\n      alert('An error occurred during authentication');\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","LoginComponent","constructor","router","service","type","isText","eyeIcon","userMail","userPassword","ngOnInit","hideShowPass","login","loginForm","authData","subscribe","response","console","log","message","alert","localStorage","setItem","token","sessionStorage","navigateByUrl","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\hp\\coChat\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthData, AuthenticationResponse, LoginService } from 'src/app/services/login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit{\n  type: string = \"password\";\n  isText: boolean = false;\n  eyeIcon:string = \"fa-eye-slash\";\n\n  userMail: string=\"\";\n  userPassword: string=\"\";\n\n  constructor(private router: Router, private service: LoginService){}\n  \n  ngOnInit():void{\n    \n  }\n\n  hideShowPass(){\n    this.isText = !this.isText;\n    this.isText? this.eyeIcon = \"fa-eye\" : this.eyeIcon = \"fa-eye-slash\";\n    this.isText ? this.type = \"text\": this.type = \"password\";\n  }\n\n \n  login(loginForm: NgForm) {\n    const authData: AuthData = {\n      userMail: this.userMail,\n      userPassword: this.userPassword\n    };\n\n    this.service.login(authData).subscribe(\n      (response: AuthenticationResponse) => {\n        console.log(response);\n\n        if (response.message === \"Email not exists\") {\n          alert(\"Email not exists\");\n        } else if (response.message === \"Login Success\") {\n          // Save the token in localStorage and sessionStorage\n          localStorage.setItem('token', response.token);\n          sessionStorage.setItem('token', response.token);\n\n          // You can also store other user-related data if you receive them in the response\n          // For example, to store the user's email:\n          localStorage.setItem('userEmail', authData.userMail);\n          sessionStorage.setItem('userEmail', authData.userMail);\n\n          this.router.navigateByUrl('/register'); // Navigate to the desired page after successful login\n        } else {\n          alert(\"Incorrect email or password\");\n        }\n      },\n      (error) => {\n        console.error('Error authenticating user:', error);\n        alert('An error occurred during authentication');\n      }\n    );\n  }\n}\n"],"mappings":";AACA,SAASA,SAAS,QAAgB,eAAe;AAU1C,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAQzBC,YAAoBC,MAAc,EAAUC,OAAqB;IAA7C,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,OAAO,GAAPA,OAAO;IAPnD,KAAAC,IAAI,GAAW,UAAU;IACzB,KAAAC,MAAM,GAAY,KAAK;IACvB,KAAAC,OAAO,GAAU,cAAc;IAE/B,KAAAC,QAAQ,GAAS,EAAE;IACnB,KAAAC,YAAY,GAAS,EAAE;EAE4C;EAEnEC,QAAQA,CAAA,GAER;EAEAC,YAAYA,CAAA;IACV,IAAI,CAACL,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;IAC1B,IAAI,CAACA,MAAM,GAAE,IAAI,CAACC,OAAO,GAAG,QAAQ,GAAG,IAAI,CAACA,OAAO,GAAG,cAAc;IACpE,IAAI,CAACD,MAAM,GAAG,IAAI,CAACD,IAAI,GAAG,MAAM,GAAE,IAAI,CAACA,IAAI,GAAG,UAAU;EAC1D;EAGAO,KAAKA,CAACC,SAAiB;IACrB,MAAMC,QAAQ,GAAa;MACzBN,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,YAAY,EAAE,IAAI,CAACA;KACpB;IAED,IAAI,CAACL,OAAO,CAACQ,KAAK,CAACE,QAAQ,CAAC,CAACC,SAAS,CACnCC,QAAgC,IAAI;MACnCC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MAErB,IAAIA,QAAQ,CAACG,OAAO,KAAK,kBAAkB,EAAE;QAC3CC,KAAK,CAAC,kBAAkB,CAAC;OAC1B,MAAM,IAAIJ,QAAQ,CAACG,OAAO,KAAK,eAAe,EAAE;QAC/C;QACAE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEN,QAAQ,CAACO,KAAK,CAAC;QAC7CC,cAAc,CAACF,OAAO,CAAC,OAAO,EAAEN,QAAQ,CAACO,KAAK,CAAC;QAE/C;QACA;QACAF,YAAY,CAACC,OAAO,CAAC,WAAW,EAAER,QAAQ,CAACN,QAAQ,CAAC;QACpDgB,cAAc,CAACF,OAAO,CAAC,WAAW,EAAER,QAAQ,CAACN,QAAQ,CAAC;QAEtD,IAAI,CAACL,MAAM,CAACsB,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC;OACzC,MAAM;QACLL,KAAK,CAAC,6BAA6B,CAAC;;IAExC,CAAC,EACAM,KAAK,IAAI;MACRT,OAAO,CAACS,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDN,KAAK,CAAC,yCAAyC,CAAC;IAClD,CAAC,CACF;EACH;CACD;AAtDYnB,cAAc,GAAA0B,UAAA,EAL1B3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACW7B,cAAc,CAsD1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
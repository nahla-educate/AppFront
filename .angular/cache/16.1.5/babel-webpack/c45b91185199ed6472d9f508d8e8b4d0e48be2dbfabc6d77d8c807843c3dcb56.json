{"ast":null,"code":"import { WebSocketAPI } from './services/WebSocketAPI';\nimport * as i0 from \"@angular/core\";\nfunction AppComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"app-register\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_div_1_li_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"strong\");\n    i0.ɵɵtext(2, \"From:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"strong\");\n    i0.ɵɵtext(5, \"To:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6);\n    i0.ɵɵelementStart(7, \"strong\");\n    i0.ɵɵtext(8, \"Content:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r3 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", message_r3.sender, \" | \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", message_r3.receiver, \" | \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", message_r3.content, \" \");\n  }\n}\nfunction AppComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h2\");\n    i0.ɵɵtext(5, \"Messages:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"ul\");\n    i0.ɵɵtemplate(7, AppComponent_div_1_li_7_Template, 10, 3, \"li\", 4);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(8, \"div\", 2)(9, \"div\", 5)(10, \"form\", 6)(11, \"div\", 7)(12, \"label\", 8);\n    i0.ɵɵtext(13, \"WebSocket connection:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_1_Template_button_click_14_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.connect());\n    });\n    i0.ɵɵtext(15, \"Connect\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_1_Template_button_click_16_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.disconnect());\n    });\n    i0.ɵɵtext(17, \"Disconnect\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(18, \"div\", 5)(19, \"form\", 6)(20, \"div\", 7)(21, \"label\", 10);\n    i0.ɵɵtext(22, \"Enter your message:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"input\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function AppComponent_div_1_Template_input_ngModelChange_23_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.messageContent = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(24, \"br\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_1_Template_button_click_25_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.sendMessage());\n    });\n    i0.ɵɵtext(26, \"Send\");\n    i0.ɵɵelementEnd()()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.messages);\n    i0.ɵɵadvance(16);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.messageContent);\n  }\n}\nexport class AppComponent {\n  constructor() {\n    this.title = 'coChat';\n    this.name = '';\n    this.messageContent = '';\n    this.messages = [];\n  }\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n  }\n\n  connect() {\n    this.webSocketAPI._connect();\n  }\n  disconnect() {\n    this.webSocketAPI._disconnect();\n  }\n  // Method to set the user's name during signup\n  setUser(name) {\n    this.name = name;\n  }\n  sendMessage() {\n    /* this.webSocketAPI._send(this.name);\n     // Add the sent message to the messages list\n     this.messages.push({ sender: this.name, receiver: 'Server', content: this.name });*/\n    if (this.messageContent.trim() === '') {\n      return; // Don't send empty messages\n    }\n\n    this.webSocketAPI._send(this.messageContent);\n    // Add the sent message to the messages list\n    this.messages.push({\n      sender: this.name,\n      receiver: 'Server',\n      content: this.messageContent\n    });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"id\", \"main-content\", 1, \"container\"], [1, \"row\"], [1, \"col-md-12\"], [4, \"ngFor\", \"ngForOf\"], [1, \"col-md-6\"], [1, \"form-inline\"], [1, \"form-group\"], [\"for\", \"connect\"], [\"type\", \"button\", 1, \"btn\", \"btn-default\", 3, \"click\"], [\"for\", \"message\"], [\"type\", \"text\", \"name\", \"message\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AppComponent_div_0_Template, 2, 0, \"div\", 0);\n      i0.ɵɵtemplate(1, AppComponent_div_1_Template, 27, 2, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.name);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.name);\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nhandleMessage(message, any);\n{\n  console.log(\"Message Received from Server :: \", message);\n  if (typeof message === \"string\") {\n    // Parse the JSON data\n    try {\n      const parsedMessage = JSON.parse(message);\n      // Now you can access properties of the parsed message and handle it accordingly\n      console.log(\"Parsed Message:\", parsedMessage);\n      this.messages.push({\n        sender: parsedMessage.sender,\n        receiver: this.name,\n        content: parsedMessage.content\n      });\n    } catch (error) {\n      console.error(\"Error parsing message:\", error);\n    }\n  } else {\n    console.error(\"Invalid message format:\", message);\n  }\n}","map":{"version":3,"names":["WebSocketAPI","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵadvance","ɵɵtextInterpolate1","message_r3","sender","receiver","content","ɵɵtemplate","AppComponent_div_1_li_7_Template","ɵɵlistener","AppComponent_div_1_Template_button_click_14_listener","ɵɵrestoreView","_r5","ctx_r4","ɵɵnextContext","ɵɵresetView","connect","AppComponent_div_1_Template_button_click_16_listener","ctx_r6","disconnect","AppComponent_div_1_Template_input_ngModelChange_23_listener","$event","ctx_r7","messageContent","AppComponent_div_1_Template_button_click_25_listener","ctx_r8","sendMessage","ɵɵproperty","ctx_r1","messages","AppComponent","constructor","title","name","ngOnInit","webSocketAPI","_connect","_disconnect","setUser","trim","_send","push","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","AppComponent_div_0_Template","AppComponent_div_1_Template","handleMessage","message","any","console","log","parsedMessage","JSON","parse","error"],"sources":["C:\\Users\\hp\\coChat\\src\\app\\app.component.ts","C:\\Users\\hp\\coChat\\src\\app\\app.component.html"],"sourcesContent":["/*import { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'coChat';\n  \n  webSocketAPI!: WebSocketAPI;\n  greeting: any;\n  name!: string ;\n  ngOnInit() {\n  //  this.webSocketAPI = new WebSocketAPI(new AppComponent());\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n\n  }\n  connect(){\n    this.webSocketAPI._connect();\n  }\n\n  disconnect(){\n    this.webSocketAPI._disconnect();\n  }\n\n  sendMessage(){\n    this.webSocketAPI._send(this.name);\n  }\n\n  handleMessage(message: any){\n    this.greeting = message;\n  }\n}\n*/\nimport { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'coChat';\n  \n  webSocketAPI!: WebSocketAPI;\n  greeting: any;\n  name: string = '';\n  messageContent: string = '';\n  messages: { sender: string, receiver: string, content: string }[] = [];\n\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n  }\n\n  connect(){\n    this.webSocketAPI._connect();\n  }\n\n  disconnect(){\n    this.webSocketAPI._disconnect();\n  }\n // Method to set the user's name during signup\n setUser(name: string) {\n  this.name = name;\n}\n  sendMessage(){\n   /* this.webSocketAPI._send(this.name);\n    // Add the sent message to the messages list\n    this.messages.push({ sender: this.name, receiver: 'Server', content: this.name });*/\n\n    if (this.messageContent.trim() === '') {\n      return; // Don't send empty messages\n    }\n\n    this.webSocketAPI._send(this.messageContent);\n    // Add the sent message to the messages list\n    this.messages.push({ sender: this.name, receiver: 'Server', content: this.messageContent });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n\n  }\n\n  handleMessage(message: any){\n    console.log(\"Message Received from Server :: \", message);\n\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({ sender: parsedMessage.sender, receiver: this.name, content: parsedMessage.content });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n}\n","<!-- The signup form -->\r\n<div *ngIf=\"!name\">\r\n    <app-register></app-register>\r\n  </div>\r\n  \r\n  <!-- The chat components -->\r\n  <div *ngIf=\"name\">\r\n    <div id=\"main-content\" class=\"container\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <h2>Messages:</h2>\r\n          <ul>\r\n            <li *ngFor=\"let message of messages\">\r\n              <strong>From:</strong> {{ message.sender }} |\r\n              <strong>To:</strong> {{ message.receiver }} |\r\n              <strong>Content:</strong> {{ message.content }}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n          <form class=\"form-inline\">\r\n            <div class=\"form-group\">\r\n              <label for=\"connect\">WebSocket connection:</label>\r\n              <button (click)=\"connect()\" class=\"btn btn-default\" type=\"button\">Connect</button>\r\n              <button (click)=\"disconnect()\" class=\"btn btn-default\" type=\"button\">Disconnect</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <form class=\"form-inline\">\r\n            <div class=\"form-group\">\r\n              <label for=\"message\">Enter your message:</label>\r\n              <input type=\"text\" [(ngModel)]=\"messageContent\" class=\"form-control\" name=\"message\"> <br>\r\n            </div>\r\n            <button (click)=\"sendMessage()\" class=\"btn btn-default\" type=\"button\">Send</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
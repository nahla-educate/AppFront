{"ast":null,"code":"import { BYTE } from './byte';\nimport { FrameImpl } from './frame-impl';\nimport { Parser } from './parser';\nimport { StompSocketState } from './types';\nimport { Versions } from './versions';\nimport { augmentWebsocket } from './augment-websocket';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n  constructor(_client, _webSocket, config = {}) {\n    this._client = _client;\n    this._webSocket = _webSocket;\n    this._serverFrameHandlers = {\n      // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n      CONNECTED: frame => {\n        this.debug(`connected to server ${frame.headers.server}`);\n        this._connected = true;\n        this._connectedVersion = frame.headers.version;\n        // STOMP version 1.2 needs header values to be escaped\n        if (this._connectedVersion === Versions.V1_2) {\n          this._escapeHeaderValues = true;\n        }\n        this._setupHeartbeat(frame.headers);\n        this.onConnect(frame);\n      },\n      // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n      MESSAGE: frame => {\n        // the callback is registered when the client calls\n        // `subscribe()`.\n        // If there is no registered subscription for the received message,\n        // the default `onUnhandledMessage` callback is used that the client can set.\n        // This is useful for subscriptions that are automatically created\n        // on the browser side (e.g. [RabbitMQ's temporary\n        // queues](http://www.rabbitmq.com/stomp.html)).\n        const subscription = frame.headers.subscription;\n        const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n        // bless the frame to be a Message\n        const message = frame;\n        const client = this;\n        const messageId = this._connectedVersion === Versions.V1_2 ? message.headers.ack : message.headers['message-id'];\n        // add `ack()` and `nack()` methods directly to the returned frame\n        // so that a simple call to `message.ack()` can acknowledge the message.\n        message.ack = (headers = {}) => {\n          return client.ack(messageId, subscription, headers);\n        };\n        message.nack = (headers = {}) => {\n          return client.nack(messageId, subscription, headers);\n        };\n        onReceive(message);\n      },\n      // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n      RECEIPT: frame => {\n        const callback = this._receiptWatchers[frame.headers['receipt-id']];\n        if (callback) {\n          callback(frame);\n          // Server will acknowledge only once, remove the callback\n          delete this._receiptWatchers[frame.headers['receipt-id']];\n        } else {\n          this.onUnhandledReceipt(frame);\n        }\n      },\n      // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n      ERROR: frame => {\n        this.onStompError(frame);\n      }\n    };\n    // used to index subscribers\n    this._counter = 0;\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n    this._partialData = '';\n    this._escapeHeaderValues = false;\n    this._lastServerActivityTS = Date.now();\n    this.configure(config);\n  }\n  get connectedVersion() {\n    return this._connectedVersion;\n  }\n  get connected() {\n    return this._connected;\n  }\n  configure(conf) {\n    // bulk assign all properties to this\n    Object.assign(this, conf);\n  }\n  start() {\n    const parser = new Parser(\n    // On Frame\n    rawFrame => {\n      const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n      // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n      if (!this.logRawCommunication) {\n        this.debug(`<<< ${frame}`);\n      }\n      const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n      serverFrameHandler(frame);\n    },\n    // On Incoming Ping\n    () => {\n      this.debug('<<< PONG');\n    });\n    this._webSocket.onmessage = evt => {\n      this.debug('Received data');\n      this._lastServerActivityTS = Date.now();\n      if (this.logRawCommunication) {\n        const rawChunkAsString = evt.data instanceof ArrayBuffer ? new TextDecoder().decode(evt.data) : evt.data;\n        this.debug(`<<< ${rawChunkAsString}`);\n      }\n      parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n    };\n    this._onclose = closeEvent => {\n      this.debug(`Connection closed to ${this._client.brokerURL}`);\n      this._cleanUp();\n      this.onWebSocketClose(closeEvent);\n    };\n    this._webSocket.onclose = this._onclose;\n    this._webSocket.onerror = errorEvent => {\n      this.onWebSocketError(errorEvent);\n    };\n    this._webSocket.onopen = () => {\n      // Clone before updating\n      const connectHeaders = Object.assign({}, this.connectHeaders);\n      this.debug('Web Socket Opened...');\n      connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n      connectHeaders['heart-beat'] = [this.heartbeatOutgoing, this.heartbeatIncoming].join(',');\n      this._transmit({\n        command: 'CONNECT',\n        headers: connectHeaders\n      });\n    };\n  }\n  _setupHeartbeat(headers) {\n    if (headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2) {\n      return;\n    }\n    // It is valid for the server to not send this header\n    // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n    if (!headers['heart-beat']) {\n      return;\n    }\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = headers['heart-beat'].split(',').map(v => parseInt(v, 10));\n    if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n      const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = setInterval(() => {\n        if (this._webSocket.readyState === StompSocketState.OPEN) {\n          this._webSocket.send(BYTE.LF);\n          this.debug('>>> PING');\n        }\n      }, ttl);\n    }\n    if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n      const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > ttl * 2) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._closeOrDiscardWebsocket();\n        }\n      }, ttl);\n    }\n  }\n  _closeOrDiscardWebsocket() {\n    if (this.discardWebsocketOnCommFailure) {\n      this.debug('Discarding websocket, the underlying socket may linger for a while');\n      this._discardWebsocket();\n    } else {\n      this.debug('Issuing close on the websocket');\n      this._closeWebsocket();\n    }\n  }\n  forceDisconnect() {\n    if (this._webSocket) {\n      if (this._webSocket.readyState === StompSocketState.CONNECTING || this._webSocket.readyState === StompSocketState.OPEN) {\n        this._closeOrDiscardWebsocket();\n      }\n    }\n  }\n  _closeWebsocket() {\n    this._webSocket.onmessage = () => {}; // ignore messages\n    this._webSocket.close();\n  }\n  _discardWebsocket() {\n    if (!this._webSocket.terminate) {\n      augmentWebsocket(this._webSocket, msg => this.debug(msg));\n    }\n    this._webSocket.terminate();\n  }\n  _transmit(params) {\n    const {\n      command,\n      headers,\n      body,\n      binaryBody,\n      skipContentLengthHeader\n    } = params;\n    const frame = new FrameImpl({\n      command,\n      headers,\n      body,\n      binaryBody,\n      escapeHeaderValues: this._escapeHeaderValues,\n      skipContentLengthHeader\n    });\n    let rawChunk = frame.serialize();\n    if (this.logRawCommunication) {\n      this.debug(`>>> ${rawChunk}`);\n    } else {\n      this.debug(`>>> ${frame}`);\n    }\n    if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n      rawChunk = new TextEncoder().encode(rawChunk);\n    }\n    if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n      this._webSocket.send(rawChunk);\n    } else {\n      let out = rawChunk;\n      while (out.length > 0) {\n        const chunk = out.substring(0, this.maxWebSocketChunkSize);\n        out = out.substring(this.maxWebSocketChunkSize);\n        this._webSocket.send(chunk);\n        this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n      }\n    }\n  }\n  dispose() {\n    if (this.connected) {\n      try {\n        // clone before updating\n        const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n        if (!disconnectHeaders.receipt) {\n          disconnectHeaders.receipt = `close-${this._counter++}`;\n        }\n        this.watchForReceipt(disconnectHeaders.receipt, frame => {\n          this._closeWebsocket();\n          this._cleanUp();\n          this.onDisconnect(frame);\n        });\n        this._transmit({\n          command: 'DISCONNECT',\n          headers: disconnectHeaders\n        });\n      } catch (error) {\n        this.debug(`Ignoring error during disconnect ${error}`);\n      }\n    } else {\n      if (this._webSocket.readyState === StompSocketState.CONNECTING || this._webSocket.readyState === StompSocketState.OPEN) {\n        this._closeWebsocket();\n      }\n    }\n  }\n  _cleanUp() {\n    this._connected = false;\n    if (this._pinger) {\n      clearInterval(this._pinger);\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n    }\n  }\n  publish(params) {\n    const {\n      destination,\n      headers,\n      body,\n      binaryBody,\n      skipContentLengthHeader\n    } = params;\n    const hdrs = Object.assign({\n      destination\n    }, headers);\n    this._transmit({\n      command: 'SEND',\n      headers: hdrs,\n      body,\n      binaryBody,\n      skipContentLengthHeader\n    });\n  }\n  watchForReceipt(receiptId, callback) {\n    this._receiptWatchers[receiptId] = callback;\n  }\n  subscribe(destination, callback, headers = {}) {\n    headers = Object.assign({}, headers);\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[headers.id] = callback;\n    this._transmit({\n      command: 'SUBSCRIBE',\n      headers\n    });\n    const client = this;\n    return {\n      id: headers.id,\n      unsubscribe(hdrs) {\n        return client.unsubscribe(headers.id, hdrs);\n      }\n    };\n  }\n  unsubscribe(id, headers = {}) {\n    headers = Object.assign({}, headers);\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit({\n      command: 'UNSUBSCRIBE',\n      headers\n    });\n  }\n  begin(transactionId) {\n    const txId = transactionId || `tx-${this._counter++}`;\n    this._transmit({\n      command: 'BEGIN',\n      headers: {\n        transaction: txId\n      }\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit() {\n        client.commit(txId);\n      },\n      abort() {\n        client.abort(txId);\n      }\n    };\n  }\n  commit(transactionId) {\n    this._transmit({\n      command: 'COMMIT',\n      headers: {\n        transaction: transactionId\n      }\n    });\n  }\n  abort(transactionId) {\n    this._transmit({\n      command: 'ABORT',\n      headers: {\n        transaction: transactionId\n      }\n    });\n  }\n  ack(messageId, subscriptionId, headers = {}) {\n    headers = Object.assign({}, headers);\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit({\n      command: 'ACK',\n      headers\n    });\n  }\n  nack(messageId, subscriptionId, headers = {}) {\n    headers = Object.assign({}, headers);\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit({\n      command: 'NACK',\n      headers\n    });\n  }\n}","map":{"version":3,"names":["BYTE","FrameImpl","Parser","StompSocketState","Versions","augmentWebsocket","StompHandler","constructor","_client","_webSocket","config","_serverFrameHandlers","CONNECTED","frame","debug","headers","server","_connected","_connectedVersion","version","V1_2","_escapeHeaderValues","_setupHeartbeat","onConnect","MESSAGE","subscription","onReceive","_subscriptions","onUnhandledMessage","message","client","messageId","ack","nack","RECEIPT","callback","_receiptWatchers","onUnhandledReceipt","ERROR","onStompError","_counter","_partialData","_lastServerActivityTS","Date","now","configure","connectedVersion","connected","conf","Object","assign","start","parser","rawFrame","fromRawFrame","logRawCommunication","serverFrameHandler","command","onUnhandledFrame","onmessage","evt","rawChunkAsString","data","ArrayBuffer","TextDecoder","decode","parseChunk","appendMissingNULLonIncoming","_onclose","closeEvent","brokerURL","_cleanUp","onWebSocketClose","onclose","onerror","errorEvent","onWebSocketError","onopen","connectHeaders","stompVersions","supportedVersions","heartbeatOutgoing","heartbeatIncoming","join","_transmit","V1_1","serverOutgoing","serverIncoming","split","map","v","parseInt","ttl","Math","max","_pinger","setInterval","readyState","OPEN","send","LF","_ponger","delta","_closeOrDiscardWebsocket","discardWebsocketOnCommFailure","_discardWebsocket","_closeWebsocket","forceDisconnect","CONNECTING","close","terminate","msg","params","body","binaryBody","skipContentLengthHeader","escapeHeaderValues","rawChunk","serialize","forceBinaryWSFrames","TextEncoder","encode","splitLargeFrames","out","length","chunk","substring","maxWebSocketChunkSize","dispose","disconnectHeaders","receipt","watchForReceipt","onDisconnect","error","clearInterval","publish","destination","hdrs","receiptId","subscribe","id","unsubscribe","begin","transactionId","txId","transaction","commit","abort","subscriptionId"],"sources":["C:/Users/hp/coChat/node_modules/@stomp/rx-stomp/node_modules/@stomp/stompjs/esm6/stomp-handler.js"],"sourcesContent":["import { BYTE } from './byte';\nimport { FrameImpl } from './frame-impl';\nimport { Parser } from './parser';\nimport { StompSocketState, } from './types';\nimport { Versions } from './versions';\nimport { augmentWebsocket } from './augment-websocket';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n    constructor(_client, _webSocket, config = {}) {\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: frame => {\n                this.debug(`connected to server ${frame.headers.server}`);\n                this._connected = true;\n                this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (this._connectedVersion === Versions.V1_2) {\n                    this._escapeHeaderValues = true;\n                }\n                this._setupHeartbeat(frame.headers);\n                this.onConnect(frame);\n            },\n            // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: frame => {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](http://www.rabbitmq.com/stomp.html)).\n                const subscription = frame.headers.subscription;\n                const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n                // bless the frame to be a Message\n                const message = frame;\n                const client = this;\n                const messageId = this._connectedVersion === Versions.V1_2\n                    ? message.headers.ack\n                    : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = (headers = {}) => {\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = (headers = {}) => {\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: frame => {\n                const callback = this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: frame => {\n                this.onStompError(frame);\n            },\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.configure(config);\n    }\n    get connectedVersion() {\n        return this._connectedVersion;\n    }\n    get connected() {\n        return this._connected;\n    }\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    }\n    start() {\n        const parser = new Parser(\n        // On Frame\n        rawFrame => {\n            const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!this.logRawCommunication) {\n                this.debug(`<<< ${frame}`);\n            }\n            const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        () => {\n            this.debug('<<< PONG');\n        });\n        this._webSocket.onmessage = (evt) => {\n            this.debug('Received data');\n            this._lastServerActivityTS = Date.now();\n            if (this.logRawCommunication) {\n                const rawChunkAsString = evt.data instanceof ArrayBuffer\n                    ? new TextDecoder().decode(evt.data)\n                    : evt.data;\n                this.debug(`<<< ${rawChunkAsString}`);\n            }\n            parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n        };\n        this._onclose = (closeEvent) => {\n            this.debug(`Connection closed to ${this._client.brokerURL}`);\n            this._cleanUp();\n            this.onWebSocketClose(closeEvent);\n        };\n        this._webSocket.onclose = this._onclose;\n        this._webSocket.onerror = (errorEvent) => {\n            this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = () => {\n            // Clone before updating\n            const connectHeaders = Object.assign({}, this.connectHeaders);\n            this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [\n                this.heartbeatOutgoing,\n                this.heartbeatIncoming,\n            ].join(',');\n            this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    }\n    _setupHeartbeat(headers) {\n        if (headers.version !== Versions.V1_1 &&\n            headers.version !== Versions.V1_2) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        const [serverOutgoing, serverIncoming] = headers['heart-beat']\n            .split(',')\n            .map((v) => parseInt(v, 10));\n        if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(`send PING every ${ttl}ms`);\n            this._pinger = setInterval(() => {\n                if (this._webSocket.readyState === StompSocketState.OPEN) {\n                    this._webSocket.send(BYTE.LF);\n                    this.debug('>>> PING');\n                }\n            }, ttl);\n        }\n        if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(`check PONG every ${ttl}ms`);\n            this._ponger = setInterval(() => {\n                const delta = Date.now() - this._lastServerActivityTS;\n                // We wait twice the TTL to be flexible on window's setInterval calls\n                if (delta > ttl * 2) {\n                    this.debug(`did not receive server activity for the last ${delta}ms`);\n                    this._closeOrDiscardWebsocket();\n                }\n            }, ttl);\n        }\n    }\n    _closeOrDiscardWebsocket() {\n        if (this.discardWebsocketOnCommFailure) {\n            this.debug('Discarding websocket, the underlying socket may linger for a while');\n            this._discardWebsocket();\n        }\n        else {\n            this.debug('Issuing close on the websocket');\n            this._closeWebsocket();\n        }\n    }\n    forceDisconnect() {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeOrDiscardWebsocket();\n            }\n        }\n    }\n    _closeWebsocket() {\n        this._webSocket.onmessage = () => { }; // ignore messages\n        this._webSocket.close();\n    }\n    _discardWebsocket() {\n        if (!this._webSocket.terminate) {\n            augmentWebsocket(this._webSocket, (msg) => this.debug(msg));\n        }\n        this._webSocket.terminate();\n    }\n    _transmit(params) {\n        const { command, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const frame = new FrameImpl({\n            command,\n            headers,\n            body,\n            binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader,\n        });\n        let rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(`>>> ${rawChunk}`);\n        }\n        else {\n            this.debug(`>>> ${frame}`);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            let out = rawChunk;\n            while (out.length > 0) {\n                const chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n            }\n        }\n    }\n    dispose() {\n        if (this.connected) {\n            try {\n                // clone before updating\n                const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = `close-${this._counter++}`;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, frame => {\n                    this._closeWebsocket();\n                    this._cleanUp();\n                    this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(`Ignoring error during disconnect ${error}`);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    }\n    _cleanUp() {\n        this._connected = false;\n        if (this._pinger) {\n            clearInterval(this._pinger);\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n        }\n    }\n    publish(params) {\n        const { destination, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const hdrs = Object.assign({ destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body,\n            binaryBody,\n            skipContentLengthHeader,\n        });\n    }\n    watchForReceipt(receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = `sub-${this._counter++}`;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers });\n        const client = this;\n        return {\n            id: headers.id,\n            unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            },\n        };\n    }\n    unsubscribe(id, headers = {}) {\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers });\n    }\n    begin(transactionId) {\n        const txId = transactionId || `tx-${this._counter++}`;\n        this._transmit({\n            command: 'BEGIN',\n            headers: {\n                transaction: txId,\n            },\n        });\n        const client = this;\n        return {\n            id: txId,\n            commit() {\n                client.commit(txId);\n            },\n            abort() {\n                client.abort(txId);\n            },\n        };\n    }\n    commit(transactionId) {\n        this._transmit({\n            command: 'COMMIT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    abort(transactionId) {\n        this._transmit({\n            command: 'ABORT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
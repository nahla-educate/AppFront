{"ast":null,"code":"import { __decorate } from \"tslib\";\n/*import { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'coChat';\n  \n  webSocketAPI!: WebSocketAPI;\n  greeting: any;\n  name!: string ;\n  ngOnInit() {\n  //  this.webSocketAPI = new WebSocketAPI(new AppComponent());\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n\n  }\n  connect(){\n    this.webSocketAPI._connect();\n  }\n\n  disconnect(){\n    this.webSocketAPI._disconnect();\n  }\n\n  sendMessage(){\n    this.webSocketAPI._send(this.name);\n  }\n\n  handleMessage(message: any){\n    this.greeting = message;\n  }\n}\n*/\n/*import { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'coChat';\n  \n  webSocketAPI!: WebSocketAPI;\n  selectedRecipient: string = '';\n  users: string[] = ['User1', 'User2', 'User3']; // Replace this with your list of users\n\n  greeting: any;\n  name: string = '';\n  messageContent: string = '';\n  messages: { sender: string, receiver: string, content: string }[] = [];\n\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n  }\n\n  connect(){\n    this.webSocketAPI._connect();\n  }\n\n  disconnect(){\n    this.webSocketAPI._disconnect();\n  }\n // Method to set the user's name during signup\n setUser(name: string) {\n  this.name = name;\n}\n/*  sendMessage(){\n   // this.webSocketAPI._send(this.name);\n    // Add the sent message to the messages list\n    //this.messages.push({ sender: this.name, receiver: 'Server', content: this.name });\n\n    if (this.messageContent.trim() === '') {\n      return; // Don't send empty messages\n    }\n\n    this.webSocketAPI._send(this.messageContent);\n    // Add the sent message to the messages list\n    this.messages.push({ sender: this.name, receiver: 'Server', content: this.messageContent });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n\n  \n\n  handleMessage(message: any){\n    console.log(\"Message Received from Server :: \", message);\n\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({ sender: parsedMessage.sender, receiver: this.name, content: parsedMessage.content });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n}  sendMessage() {\n  if (this.messageContent.trim() === '' || this.selectedRecipient.trim() === '') {\n    return; // Don't send empty messages or if recipient is not selected\n  }\n\n  this.webSocketAPI._send(JSON.stringify({\n    sender: this.name,\n    recipient: this.selectedRecipient,\n    content: this.messageContent\n  }));\n\n  // Add the sent message to the messages list\n  this.messages.push({ sender: this.name, receiver: this.selectedRecipient, content: this.messageContent });\n  this.messageContent = ''; // Clear the message input box after sending\n}\n\nhandleMessage(message: any) {\n  console.log(\"Message Received from Server :: \", message);\n\n  if (typeof message === \"string\") {\n    // Parse the JSON data\n    try {\n      const parsedMessage = JSON.parse(message);\n      // Now you can access properties of the parsed message and handle it accordingly\n      console.log(\"Parsed Message:\", parsedMessage);\n      this.messages.push({ sender: parsedMessage.sender, receiver: parsedMessage.recipient, content: parsedMessage.content });\n    } catch (error) {\n      console.error(\"Error parsing message:\", error);\n    }\n  } else {\n    console.error(\"Invalid message format:\", message);\n  }\n}\n}\n*/\nimport { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\nexport let AppComponent = class AppComponent {\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n  }\n\n  connect() {\n    this.webSocketAPI._connect();\n  }\n  disconnect() {\n    this.webSocketAPI._disconnect();\n  }\n  // Method to set the user's name during signup\n  setUser(name) {\n    this.name = name;\n  }\n  constructor(http) {\n    this.http = http;\n    this.title = 'coChat';\n    this.selectedRecipient = '';\n    this.users = ['User1', 'User2', 'User3']; // Replace this with your list of users\n    this.name = '';\n    this.messageContent = '';\n    this.messages = [];\n    /* sendMessage() {\n       if (this.messageContent.trim() === '' || this.selectedRecipient.trim() === '') {\n         return; // Don't send empty messages or if the recipient is not selected\n       }\n               this.webSocketAPI._send(JSON.stringify({\n         sender: this.name,\n         recipient: this.selectedRecipient,\n         content: this.messageContent\n       }));\n               // Add the sent message to the messages list\n       this.messages.push({ sender: this.name, receiver: this.selectedRecipient, content: this.messageContent });\n       this.messageContent = ''; // Clear the message input box after sending\n     }\n             sendInvitation() {\n       if (this.selectedRecipient.trim() === '') {\n         return; // Don't send invitations if the recipient is not selected\n       }\n               this.webSocketAPI._send(JSON.stringify({\n         sender: this.name,\n         recipient: this.selectedRecipient,\n         content: \"Invitation from \" + this.name // Customize the invitation content as needed\n       }));\n               // No need to add the invitation to the messages list\n       // The server will handle the invitation and send a notification back\n               // Optionally, you can add your own logic to handle invitation status (accepted, declined, etc.)\n     }\n             */\n    this.searchQuery = '';\n    this.searchResults = [];\n  }\n  searchUsers() {\n    if (!this.searchQuery) {\n      // Empty search query, clear the search results\n      this.searchResults = [];\n      return;\n    }\n    // Call the backend API to retrieve the search results\n    this.http.get(`/api/search-users?query=${this.searchQuery}`).subscribe(response => {\n      this.searchResults = response;\n    }, error => {\n      console.error('Error fetching search results:', error);\n    });\n  }\n  // ... (existing code)\n  sendInvitationn(user) {\n    if (!user || !user.username) {\n      return; // Invalid user, handle error if needed\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: user.username,\n      content: \"Invitation from \" + this.name // Customize the invitation content as needed\n    }));\n  }\n\n  sendInvitation() {\n    if (this.selectedRecipient.trim() === '') {\n      return; // Don't send invitations if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: \"Invitation from \" + this.name // Customize the invitation content as needed\n    }));\n  }\n\n  sendMessage() {\n    if (this.messageContent.trim() === '' || this.selectedRecipient.trim() === '') {\n      return; // Don't send empty messages or if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: this.messageContent\n    }));\n    // Add the sent message to the messages list\n    this.messages.push({\n      sender: this.name,\n      receiver: this.selectedRecipient,\n      content: this.messageContent\n    });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n  // ... (existing code)\n  handleMessage(message) {\n    console.log(\"Message Received from Server :: \", message);\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({\n          sender: parsedMessage.sender,\n          receiver: parsedMessage.recipient,\n          content: parsedMessage.content\n        });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","WebSocketAPI","AppComponent","ngOnInit","webSocketAPI","connect","_connect","disconnect","_disconnect","setUser","name","constructor","http","title","selectedRecipient","users","messageContent","messages","searchQuery","searchResults","searchUsers","get","subscribe","response","error","console","sendInvitationn","user","username","_send","JSON","stringify","sender","recipient","content","sendInvitation","trim","sendMessage","push","receiver","handleMessage","message","log","parsedMessage","parse","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\hp\\coChat\\src\\app\\app.component.ts"],"sourcesContent":["/*import { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'coChat';\n  \n  webSocketAPI!: WebSocketAPI;\n  greeting: any;\n  name!: string ;\n  ngOnInit() {\n  //  this.webSocketAPI = new WebSocketAPI(new AppComponent());\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n\n  }\n  connect(){\n    this.webSocketAPI._connect();\n  }\n\n  disconnect(){\n    this.webSocketAPI._disconnect();\n  }\n\n  sendMessage(){\n    this.webSocketAPI._send(this.name);\n  }\n\n  handleMessage(message: any){\n    this.greeting = message;\n  }\n}\n*/\n/*import { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'coChat';\n  \n  webSocketAPI!: WebSocketAPI;\n  selectedRecipient: string = '';\n  users: string[] = ['User1', 'User2', 'User3']; // Replace this with your list of users\n\n  greeting: any;\n  name: string = '';\n  messageContent: string = '';\n  messages: { sender: string, receiver: string, content: string }[] = [];\n\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n  }\n\n  connect(){\n    this.webSocketAPI._connect();\n  }\n\n  disconnect(){\n    this.webSocketAPI._disconnect();\n  }\n // Method to set the user's name during signup\n setUser(name: string) {\n  this.name = name;\n}\n/*  sendMessage(){\n   // this.webSocketAPI._send(this.name);\n    // Add the sent message to the messages list\n    //this.messages.push({ sender: this.name, receiver: 'Server', content: this.name });\n\n    if (this.messageContent.trim() === '') {\n      return; // Don't send empty messages\n    }\n\n    this.webSocketAPI._send(this.messageContent);\n    // Add the sent message to the messages list\n    this.messages.push({ sender: this.name, receiver: 'Server', content: this.messageContent });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n\n  \n\n  handleMessage(message: any){\n    console.log(\"Message Received from Server :: \", message);\n\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({ sender: parsedMessage.sender, receiver: this.name, content: parsedMessage.content });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n}  sendMessage() {\n  if (this.messageContent.trim() === '' || this.selectedRecipient.trim() === '') {\n    return; // Don't send empty messages or if recipient is not selected\n  }\n\n  this.webSocketAPI._send(JSON.stringify({\n    sender: this.name,\n    recipient: this.selectedRecipient,\n    content: this.messageContent\n  }));\n\n  // Add the sent message to the messages list\n  this.messages.push({ sender: this.name, receiver: this.selectedRecipient, content: this.messageContent });\n  this.messageContent = ''; // Clear the message input box after sending\n}\n\nhandleMessage(message: any) {\n  console.log(\"Message Received from Server :: \", message);\n\n  if (typeof message === \"string\") {\n    // Parse the JSON data\n    try {\n      const parsedMessage = JSON.parse(message);\n      // Now you can access properties of the parsed message and handle it accordingly\n      console.log(\"Parsed Message:\", parsedMessage);\n      this.messages.push({ sender: parsedMessage.sender, receiver: parsedMessage.recipient, content: parsedMessage.content });\n    } catch (error) {\n      console.error(\"Error parsing message:\", error);\n    }\n  } else {\n    console.error(\"Invalid message format:\", message);\n  }\n}\n}\n*/\nimport { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'coChat';\n\n  webSocketAPI!: WebSocketAPI;\n  selectedRecipient: string = '';\n  users: string[] = ['User1', 'User2', 'User3']; // Replace this with your list of users\n\n  greeting: any;\n  name: string = '';\n  messageContent: string = '';\n  messages: { sender: string, receiver: string, content: string }[] = [];\n\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n  }\n\n  connect(){\n    this.webSocketAPI._connect();\n  }\n\n  disconnect(){\n    this.webSocketAPI._disconnect();\n  }\n\n  // Method to set the user's name during signup\n  setUser(name: string) {\n    this.name = name;\n  }\n\n /* sendMessage() {\n    if (this.messageContent.trim() === '' || this.selectedRecipient.trim() === '') {\n      return; // Don't send empty messages or if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: this.messageContent\n    }));\n\n    // Add the sent message to the messages list\n    this.messages.push({ sender: this.name, receiver: this.selectedRecipient, content: this.messageContent });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n\n  sendInvitation() {\n    if (this.selectedRecipient.trim() === '') {\n      return; // Don't send invitations if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: \"Invitation from \" + this.name // Customize the invitation content as needed\n    }));\n\n    // No need to add the invitation to the messages list\n    // The server will handle the invitation and send a notification back\n\n    // Optionally, you can add your own logic to handle invitation status (accepted, declined, etc.)\n  }\n\n  */\n  searchQuery: string = '';\n  searchResults: any[] = [];\n\n  constructor(private http: HttpClient) {}\n\n  searchUsers() {\n    if (!this.searchQuery) {\n      // Empty search query, clear the search results\n      this.searchResults = [];\n      return;\n    }\n\n    // Call the backend API to retrieve the search results\n    this.http.get<any[]>(`/api/search-users?query=${this.searchQuery}`).subscribe(\n      (response) => {\n        this.searchResults = response;\n      },\n      (error) => {\n        console.error('Error fetching search results:', error);\n      }\n    );\n  }\n\n  // ... (existing code)\n\n  sendInvitationn(user: any) {\n    if (!user || !user.username) {\n      return; // Invalid user, handle error if needed\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: user.username,\n      content: \"Invitation from \" + this.name // Customize the invitation content as needed\n    }));\n  }\n\n\n\n\n\nsendInvitation() {\n  if (this.selectedRecipient.trim() === '') {\n    return; // Don't send invitations if the recipient is not selected\n  }\n\n  this.webSocketAPI._send(JSON.stringify({\n    sender: this.name,\n    recipient: this.selectedRecipient,\n    content: \"Invitation from \" + this.name // Customize the invitation content as needed\n  }));\n}\n\nsendMessage() {\n  if (this.messageContent.trim() === '' || this.selectedRecipient.trim() === '') {\n    return; // Don't send empty messages or if the recipient is not selected\n  }\n\n  this.webSocketAPI._send(JSON.stringify({\n    sender: this.name,\n    recipient: this.selectedRecipient,\n    content: this.messageContent\n  }));\n\n  // Add the sent message to the messages list\n  this.messages.push({ sender: this.name, receiver: this.selectedRecipient, content: this.messageContent });\n  this.messageContent = ''; // Clear the message input box after sending\n}\n\n// ... (existing code)\n\n  handleMessage(message: any) {\n    console.log(\"Message Received from Server :: \", message);\n\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({ sender: parsedMessage.sender, receiver: parsedMessage.recipient, content: parsedMessage.content });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { WebSocketAPI } from './services/WebSocketAPI';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nfunction AppComponent_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const user_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r4.userId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r4.userName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r4.userMail);\n  }\n}\nfunction AppComponent_option_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", user_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(user_r5);\n  }\n}\nfunction AppComponent_div_45_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r7 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(message_r7.sender);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\": \", message_r7.content, \" \");\n  }\n}\nfunction AppComponent_div_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \"Chat Messages:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, AppComponent_div_45_li_4_Template, 4, 2, \"li\", 0);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.messages);\n  }\n}\nfunction AppComponent_div_48_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_48_li_4_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const user_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.sendInvitationn(user_r9));\n    });\n    i0.ɵɵtext(3, \"Invite\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const user_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", user_r9.userName, \" \");\n  }\n}\nfunction AppComponent_div_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \"Search Results:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, AppComponent_div_48_li_4_Template, 4, 1, \"li\", 0);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.searchResults);\n  }\n}\nexport class AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.title = 'coChat';\n    this.userList = [];\n    this.selectedRecipient = null;\n    this.users = ['User1', 'User2', 'User3']; // Replace this with your list of users\n    this.name = '';\n    this.messageContent = '';\n    this.messages = [];\n    this.searchQuery = '';\n    this.searchResults = [];\n  }\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n    this.fetchUserList();\n  }\n  fetchUserList() {\n    this.http.get('http://localhost:8080/api/auth/list').subscribe(response => {\n      this.userList = response;\n    }, error => {\n      console.error('Error fetching user list:', error);\n    });\n  }\n  connect() {\n    this.webSocketAPI._connect();\n  }\n  disconnect() {\n    this.webSocketAPI._disconnect();\n  }\n  // Method to set the user's name during signup\n  setUser(name) {\n    this.name = name;\n  }\n  /* sendMessage() {\n     if (this.messageContent.trim() === '' || this.selectedRecipient.trim() === '') {\n       return; // Don't send empty messages or if the recipient is not selected\n     }\n         this.webSocketAPI._send(JSON.stringify({\n       sender: this.name,\n       recipient: this.selectedRecipient,\n       content: this.messageContent\n     }));\n         // Add the sent message to the messages list\n     this.messages.push({ sender: this.name, receiver: this.selectedRecipient, content: this.messageContent });\n     this.messageContent = ''; // Clear the message input box after sending\n   }\n       sendInvitation() {\n     if (this.selectedRecipient.trim() === '') {\n       return; // Don't send invitations if the recipient is not selected\n     }\n         this.webSocketAPI._send(JSON.stringify({\n       sender: this.name,\n       recipient: this.selectedRecipient,\n       content: \"Invitation from \" + this.name // Customize the invitation content as needed\n     }));\n   }\n  */\n  sendMessage() {\n    /* if (!this.selectedRecipient || !this.messageContent.trim()) {\n       return; // Don't send empty messages or if the recipient is not selected\n     }\n             this.webSocketAPI._send(JSON.stringify({\n       sender: this.name,\n       recipient: this.selectedRecipient.userName,\n       content: this.messageContent\n     }));\n             // Add the sent message to the messages list\n     this.messages.push({ sender: this.name, receiver: this.selectedRecipient.userName, content: this.messageContent });\n     this.messageContent = ''; // Clear the message input box after sending\n    */\n    if (!this.selectedRecipient || !this.messageContent.trim()) {\n      return; // Don't send empty messages or if the recipient is not selected\n    }\n\n    if (this.selectedRecipient.userName === this.name) {\n      // Send a greeting message to oneself\n      this.webSocketAPI._sendHelloMessage(this.name, this.messageContent);\n    } else {\n      // Send a chat message to the selected recipient\n      this.webSocketAPI._send(JSON.stringify({\n        sender: this.name,\n        recipient: this.selectedRecipient.userName,\n        content: this.messageContent,\n        type: \"chat\"\n      }));\n    } // Add the sent message to the messages list\n    this.messages.push({\n      sender: this.name,\n      receiver: this.selectedRecipient.userName,\n      content: this.messageContent\n    });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n\n  sendInvitation() {\n    if (!this.selectedRecipient) {\n      return; // Don't send invitations if the recipient is not selected\n    }\n\n    this.webSocketAPI._sendInvitation(\"Invitation from \" + this.name);\n    /*if (!this.selectedRecipient) {\n      return; // Don't send invitations if the recipient is not selected\n    }\n    \n           this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient.userName,\n      content: \"Invitation from \" + this.name // Customize the invitation content as needed\n    }));*/\n  }\n\n  selectUser(user) {\n    // Set the selected recipient when a user is clicked from the search results\n    this.selectedRecipient = user;\n  }\n  searchUsers() {\n    if (!this.searchQuery) {\n      // Empty search query, clear the search results\n      this.searchResults = [];\n      return;\n    }\n    // Call the backend API to retrieve the search results\n    this.http.get(`http://localhost:8080/api/auth/users?userName=${this.searchQuery}`).subscribe(response => {\n      this.searchResults = response;\n      console.log('search results', response);\n    }, error => {\n      console.error('Error fetching search results:', error);\n    });\n  }\n  sendInvitationn(user) {\n    if (!user || !user.userName) {\n      return; // Invalid user, handle error if needed\n    }\n\n    console.log(\"Sending invitation to user:\", user.userName);\n    // Call the WebSocketAPI to send the invitation\n    this.webSocketAPI._sendInvitation(JSON.stringify({\n      sender: this.name\n    }));\n    // Handle the invitation logic here, e.g., display a notification or confirmation message\n    // You can customize this according to your requirements\n    alert(\"Invitation sent to \" + user.userName);\n  }\n  handleMessage(message) {\n    console.log(\"Message Received from Server :: \", message);\n    this.greeting = message;\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({\n          sender: parsedMessage.sender,\n          receiver: parsedMessage.recipient,\n          content: parsedMessage.content\n        });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 49,\n  vars: 8,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [\"id\", \"main-content\", 1, \"container\"], [1, \"row\"], [1, \"col-md-6\"], [1, \"form-inline\"], [1, \"form-group\"], [\"for\", \"connect\"], [\"type\", \"button\", 1, \"btn\", \"btn-default\", 3, \"click\"], [\"for\", \"recipient\"], [\"name\", \"recipient\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"message\"], [\"type\", \"text\", \"name\", \"message\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"placeholder\", \"Search for users\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"], [3, \"click\"], [4, \"ngIf\"], [3, \"value\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelement(1, \"app-register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"h1\");\n      i0.ɵɵtext(3, \"User List\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"table\")(5, \"tr\")(6, \"th\");\n      i0.ɵɵtext(7, \"User ID\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\");\n      i0.ɵɵtext(9, \"User Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"th\");\n      i0.ɵɵtext(11, \"User Mail\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(12, AppComponent_tr_12_Template, 7, 3, \"tr\", 0);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\")(14, \"div\", 1)(15, \"div\", 2)(16, \"div\", 3)(17, \"form\", 4)(18, \"div\", 5)(19, \"label\", 6);\n      i0.ɵɵtext(20, \"WebSocket connection:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_21_listener() {\n        return ctx.connect();\n      });\n      i0.ɵɵtext(22, \"Connect\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_23_listener() {\n        return ctx.disconnect();\n      });\n      i0.ɵɵtext(24, \"Disconnect\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(25, \"div\", 3)(26, \"form\", 4)(27, \"div\", 5)(28, \"label\", 8);\n      i0.ɵɵtext(29, \"Select recipient:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(30, \"select\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_select_ngModelChange_30_listener($event) {\n        return ctx.selectedRecipient = $event;\n      });\n      i0.ɵɵtemplate(31, AppComponent_option_31_Template, 2, 2, \"option\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(32, \"div\", 5)(33, \"label\", 11);\n      i0.ɵɵtext(34, \"Enter your message:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"input\", 12);\n      i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_35_listener($event) {\n        return ctx.messageContent = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(36, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(37, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_37_listener() {\n        return ctx.sendInvitation();\n      });\n      i0.ɵɵtext(38, \"Send Invitation\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(39, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_39_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵtext(40, \"Send Message\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(41, \"div\")(42, \"input\", 13);\n      i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_42_listener($event) {\n        return ctx.searchQuery = $event;\n      })(\"keyup.enter\", function AppComponent_Template_input_keyup_enter_42_listener() {\n        return ctx.searchUsers();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"button\", 14);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_43_listener() {\n        return ctx.searchUsers();\n      });\n      i0.ɵɵtext(44, \"Search\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(45, AppComponent_div_45_Template, 5, 1, \"div\", 15);\n      i0.ɵɵelementStart(46, \"p\");\n      i0.ɵɵtext(47);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(48, AppComponent_div_48_Template, 5, 1, \"div\", 15);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"ngForOf\", ctx.userList);\n      i0.ɵɵadvance(18);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedRecipient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.users);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.messageContent);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.searchQuery);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.messages.length > 0);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.greeting, \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.searchResults.length > 0);\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["WebSocketAPI","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","user_r4","userId","userName","userMail","ɵɵproperty","user_r5","message_r7","sender","ɵɵtextInterpolate1","content","ɵɵtemplate","AppComponent_div_45_li_4_Template","ctx_r2","messages","ɵɵlistener","AppComponent_div_48_li_4_Template_button_click_2_listener","restoredCtx","ɵɵrestoreView","_r11","user_r9","$implicit","ctx_r10","ɵɵnextContext","ɵɵresetView","sendInvitationn","AppComponent_div_48_li_4_Template","ctx_r3","searchResults","AppComponent","constructor","http","title","userList","selectedRecipient","users","name","messageContent","searchQuery","ngOnInit","webSocketAPI","fetchUserList","get","subscribe","response","error","console","connect","_connect","disconnect","_disconnect","setUser","sendMessage","trim","_sendHelloMessage","_send","JSON","stringify","recipient","type","push","receiver","sendInvitation","_sendInvitation","selectUser","user","searchUsers","log","alert","handleMessage","message","greeting","parsedMessage","parse","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelement","AppComponent_tr_12_Template","AppComponent_Template_button_click_21_listener","AppComponent_Template_button_click_23_listener","AppComponent_Template_select_ngModelChange_30_listener","$event","AppComponent_option_31_Template","AppComponent_Template_input_ngModelChange_35_listener","AppComponent_Template_button_click_37_listener","AppComponent_Template_button_click_39_listener","AppComponent_Template_input_ngModelChange_42_listener","AppComponent_Template_input_keyup_enter_42_listener","AppComponent_Template_button_click_43_listener","AppComponent_div_45_Template","AppComponent_div_48_Template","length"],"sources":["C:\\Users\\hp\\coChat\\src\\app\\app.component.ts","C:\\Users\\hp\\coChat\\src\\app\\app.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\nimport { HttpClient } from '@angular/common/http';\ninterface User {\n  userId: number;\n  userName: string;\n  userMail: string;\n  // Add more properties as needed\n}\ninterface InvitationMessage {\n  sender: string;\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'coChat';\n  userList: User[] = [];\n  webSocketAPI!: WebSocketAPI;\n  selectedRecipient: User | null = null;\n\n  users: string[] = ['User1', 'User2', 'User3']; // Replace this with your list of users\n  //selectedRecipient: User | null = null; // Store the selected recipient\n \n  greeting: any;\n  name: string = '';\n  messageContent: string = '';\n  messages: { sender: string, receiver: string, content: string }[] = [];\n\n  searchQuery: string = '';\n  searchResults: any[] = [];\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n    this.fetchUserList();\n  }\n  fetchUserList() {\n    this.http.get<User[]>('http://localhost:8080/api/auth/list').subscribe(\n      (response) => {\n        this.userList = response;\n      },\n      (error) => {\n        console.error('Error fetching user list:', error);\n      }\n    );\n  }\n\n  connect() {\n    this.webSocketAPI._connect();\n  }\n\n  disconnect() {\n    this.webSocketAPI._disconnect();\n  }\n\n  // Method to set the user's name during signup\n  setUser(name: string) {\n    this.name = name;\n  }\n\n /* sendMessage() {\n    if (this.messageContent.trim() === '' || this.selectedRecipient.trim() === '') {\n      return; // Don't send empty messages or if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: this.messageContent\n    }));\n\n    // Add the sent message to the messages list\n    this.messages.push({ sender: this.name, receiver: this.selectedRecipient, content: this.messageContent });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n\n  sendInvitation() {\n    if (this.selectedRecipient.trim() === '') {\n      return; // Don't send invitations if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: \"Invitation from \" + this.name // Customize the invitation content as needed\n    }));\n  }\n*/\nsendMessage() {\n /* if (!this.selectedRecipient || !this.messageContent.trim()) {\n    return; // Don't send empty messages or if the recipient is not selected\n  }\n\n  this.webSocketAPI._send(JSON.stringify({\n    sender: this.name,\n    recipient: this.selectedRecipient.userName,\n    content: this.messageContent\n  }));\n\n  // Add the sent message to the messages list\n  this.messages.push({ sender: this.name, receiver: this.selectedRecipient.userName, content: this.messageContent });\n  this.messageContent = ''; // Clear the message input box after sending\n*/\nif (!this.selectedRecipient || !this.messageContent.trim()) {\n  return; // Don't send empty messages or if the recipient is not selected\n}\n\nif (this.selectedRecipient.userName === this.name) {\n  // Send a greeting message to oneself\n  this.webSocketAPI._sendHelloMessage(this.name,this.messageContent);\n} else {\n  // Send a chat message to the selected recipient\n  this.webSocketAPI._send(JSON.stringify({\n    sender: this.name,\n    recipient: this.selectedRecipient.userName,\n    content: this.messageContent,\n    type: \"chat\"\n  }));\n}  // Add the sent message to the messages list\nthis.messages.push({ sender: this.name, receiver: this.selectedRecipient.userName, content: this.messageContent });\nthis.messageContent = ''; // Clear the message input box after sending\n}\n\nsendInvitation() {\n  if (!this.selectedRecipient) {\n    return; // Don't send invitations if the recipient is not selected\n  }\n\n  this.webSocketAPI._sendInvitation(\"Invitation from \" + this.name);\n\n  /*if (!this.selectedRecipient) {\n    return; // Don't send invitations if the recipient is not selected\n  }\n  \n\n  this.webSocketAPI._send(JSON.stringify({\n    sender: this.name,\n    recipient: this.selectedRecipient.userName,\n    content: \"Invitation from \" + this.name // Customize the invitation content as needed\n  }));*/\n}\nselectUser(user: User) {\n  // Set the selected recipient when a user is clicked from the search results\n  this.selectedRecipient = user;\n}\n\n  searchUsers() {\n    if (!this.searchQuery) {\n      // Empty search query, clear the search results\n      this.searchResults = [];\n      return;\n    }\n\n    // Call the backend API to retrieve the search results\n    this.http.get<any[]>(`http://localhost:8080/api/auth/users?userName=${this.searchQuery}`).subscribe(\n      (response) => {\n        this.searchResults = response;\n        console.log('search results', response);\n      },\n      (error) => {\n        console.error('Error fetching search results:', error);\n      }\n    );\n  }\n\n  sendInvitationn(user: any) {\n    if (!user || !user.userName) {\n      return; // Invalid user, handle error if needed\n    }\n  \n    console.log(\"Sending invitation to user:\", user.userName);\n  \n    // Call the WebSocketAPI to send the invitation\n    this.webSocketAPI._sendInvitation(JSON.stringify({ sender: this.name }));\n    \n    // Handle the invitation logic here, e.g., display a notification or confirmation message\n    // You can customize this according to your requirements\n    alert(\"Invitation sent to \" + user.userName);\n  }\n\n  handleMessage(message: any) {\n    console.log(\"Message Received from Server :: \", message);\n    this.greeting = message;\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({ sender: parsedMessage.sender, receiver: parsedMessage.recipient, content: parsedMessage.content });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n}\n","<!-- The signup form -->\r\n<div >\r\n  <app-register></app-register>\r\n</div>\r\n<h1>User List</h1>\r\n<table>\r\n  <tr>\r\n    <th>User ID</th>\r\n    <th>User Name</th>\r\n    <th>User Mail</th>\r\n    <!-- Add more columns here as needed -->\r\n  </tr>\r\n  <tr *ngFor=\"let user of userList\">\r\n    <td>{{ user.userId }}</td>\r\n    <td>{{ user.userName }}</td>\r\n    <td>{{ user.userMail }}</td>\r\n    <!-- Add more columns here as needed -->\r\n  </tr>\r\n</table>\r\n<!-- The chat components -->\r\n<div>\r\n  <div id=\"main-content\" class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6\">\r\n        <form class=\"form-inline\">\r\n          <div class=\"form-group\">\r\n            <label for=\"connect\">WebSocket connection:</label>\r\n            <button (click)=\"connect()\" class=\"btn btn-default\" type=\"button\">Connect</button>\r\n            <button (click)=\"disconnect()\" class=\"btn btn-default\" type=\"button\">Disconnect</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <form class=\"form-inline\">\r\n          <div class=\"form-group\">\r\n            <label for=\"recipient\">Select recipient:</label>\r\n            <select [(ngModel)]=\"selectedRecipient\" class=\"form-control\" name=\"recipient\">\r\n              <option *ngFor=\"let user of users\" [value]=\"user\">{{ user }}</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"message\">Enter your message:</label>\r\n            <input type=\"text\" [(ngModel)]=\"messageContent\" class=\"form-control\" name=\"message\"> <br>\r\n          </div>\r\n          <button (click)=\"sendInvitation()\" class=\"btn btn-default\" type=\"button\">Send Invitation</button>\r\n          <button (click)=\"sendMessage()\" class=\"btn btn-default\" type=\"button\">Send Message</button>\r\n        </form>\r\n      </div>\r\n     \r\n\r\n\r\n      \r\n      <!-- <div>\r\n        <input type=\"text\" [(ngModel)]=\"searchQuery\" (keyup.enter)=\"searchUsers()\" placeholder=\"Search for users\">\r\n        <button (click)=\"searchUsers()\">Search</button>\r\n      </div>\r\n      \r\n      Display search results \r\n      <div *ngIf=\"searchResults.length > 0\">\r\n        <h2>Search Results:</h2>\r\n        <ul>\r\n          <li *ngFor=\"let user of searchResults\">\r\n            {{ user.name }} ({{ user.userName }})\r\n            <button (click)=\"sendInvitationn(user)\">Invite</button>\r\n          </li>\r\n        </ul>\r\n      </div>-->\r\n       <!-- Search bar -->\r\n    <div>\r\n      <input type=\"text\" [(ngModel)]=\"searchQuery\" (keyup.enter)=\"searchUsers()\" placeholder=\"Search for users\">\r\n      <button (click)=\"searchUsers()\">Search</button>\r\n    </div>\r\n <!-- Display the chat messages -->\r\n <div *ngIf=\"messages.length > 0\">\r\n  <h2>Chat Messages:</h2>\r\n  <ul>\r\n    <li *ngFor=\"let message of messages\">\r\n      <strong>{{ message.sender }}</strong>: {{ message.content }}\r\n    </li>\r\n  </ul>\r\n</div>\r\n<p> {{ greeting }}</p>\r\n    <!-- Display search results -->\r\n    <div *ngIf=\"searchResults.length > 0\">\r\n      <h2>Search Results:</h2>\r\n      <ul>\r\n        <li *ngFor=\"let user of searchResults\">\r\n          {{ user.userName }}\r\n          <button (click)=\"sendInvitationn(user)\">Invite</button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n\r\n\r\n    </div>\r\n  </div>\r\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
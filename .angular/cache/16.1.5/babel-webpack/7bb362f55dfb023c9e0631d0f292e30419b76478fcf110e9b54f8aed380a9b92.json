{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { StompHandler } from './stomp-handler';\nimport { ActivationState, StompSocketState } from './types';\nimport { Versions } from './versions';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n  /**\n   * Create an instance.\n   */\n  constructor(conf = {}) {\n    /**\n     * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n     *\n     * Example:\n     * ```javascript\n     *        // Try only versions 1.0 and 1.1\n     *        client.stompVersions = new Versions(['1.0', '1.1'])\n     * ```\n     */\n    this.stompVersions = Versions.default;\n    /**\n     * Will retry if Stomp connection is not established in specified milliseconds.\n     * Default 0, which implies wait for ever.\n     */\n    this.connectionTimeout = 0;\n    /**\n     *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n     */\n    this.reconnectDelay = 5000;\n    /**\n     * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n     */\n    this.heartbeatIncoming = 10000;\n    /**\n     * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n     */\n    this.heartbeatOutgoing = 10000;\n    /**\n     * This switches on a non standard behavior while sending WebSocket packets.\n     * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n     * Only Java Spring brokers seems to use this mode.\n     *\n     * WebSockets, by itself, split large (text) packets,\n     * so it is not needed with a truly compliant STOMP/WebSocket broker.\n     * Actually setting it for such broker will cause large messages to fail.\n     *\n     * `false` by default.\n     *\n     * Binary frames are never split.\n     */\n    this.splitLargeFrames = false;\n    /**\n     * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n     * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n     */\n    this.maxWebSocketChunkSize = 8 * 1024;\n    /**\n     * Usually the\n     * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n     * is automatically decided by type of the payload.\n     * Default is `false`, which should work with all compliant brokers.\n     *\n     * Set this flag to force binary frames.\n     */\n    this.forceBinaryWSFrames = false;\n    /**\n     * A bug in ReactNative chops a string on occurrence of a NULL.\n     * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n     * This makes incoming WebSocket messages invalid STOMP packets.\n     * Setting this flag attempts to reverse the damage by appending a NULL.\n     * If the broker splits a large message into multiple WebSocket messages,\n     * this flag will cause data loss and abnormal termination of connection.\n     *\n     * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n     */\n    this.appendMissingNULLonIncoming = false;\n    /**\n     * Activation state.\n     *\n     * It will usually be ACTIVE or INACTIVE.\n     * When deactivating it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n     */\n    this.state = ActivationState.INACTIVE;\n    // Dummy callbacks\n    const noOp = () => {};\n    this.debug = noOp;\n    this.beforeConnect = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n    this.onWebSocketError = noOp;\n    this.logRawCommunication = false;\n    this.onChangeState = noOp;\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this._disconnectHeaders = {};\n    // Apply configuration\n    this.configure(conf);\n  }\n  /**\n   * Underlying WebSocket instance, READONLY.\n   */\n  get webSocket() {\n    return this._stompHandler ? this._stompHandler._webSocket : undefined;\n  }\n  /**\n   * Disconnection headers.\n   */\n  get disconnectHeaders() {\n    return this._disconnectHeaders;\n  }\n  set disconnectHeaders(value) {\n    this._disconnectHeaders = value;\n    if (this._stompHandler) {\n      this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n    }\n  }\n  /**\n   * `true` if there is a active connection with STOMP Broker\n   */\n  get connected() {\n    return !!this._stompHandler && this._stompHandler.connected;\n  }\n  /**\n   * version of STOMP protocol negotiated with the server, READONLY\n   */\n  get connectedVersion() {\n    return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n  }\n  /**\n   * if the client is active (connected or going to reconnect)\n   */\n  get active() {\n    return this.state === ActivationState.ACTIVE;\n  }\n  _changeState(state) {\n    this.state = state;\n    this.onChangeState(state);\n  }\n  /**\n   * Update configuration.\n   */\n  configure(conf) {\n    // bulk assign all properties to this\n    Object.assign(this, conf);\n  }\n  /**\n   * Initiate the connection with the broker.\n   * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n   * it will keep trying to reconnect.\n   *\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n   */\n  activate() {\n    if (this.state === ActivationState.DEACTIVATING) {\n      this.debug('Still DEACTIVATING, please await call to deactivate before trying to re-activate');\n      throw new Error('Still DEACTIVATING, can not activate now');\n    }\n    if (this.active) {\n      this.debug('Already ACTIVE, ignoring request to activate');\n      return;\n    }\n    this._changeState(ActivationState.ACTIVE);\n    this._connect();\n  }\n  _connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.connected) {\n        this.debug('STOMP: already connected, nothing to do');\n        return;\n      }\n      yield this.beforeConnect();\n      if (!this.active) {\n        this.debug('Client has been marked inactive, will not attempt to connect');\n        return;\n      }\n      // setup connection watcher\n      if (this.connectionTimeout > 0) {\n        // clear first\n        if (this._connectionWatcher) {\n          clearTimeout(this._connectionWatcher);\n        }\n        this._connectionWatcher = setTimeout(() => {\n          if (this.connected) {\n            return;\n          }\n          // Connection not established, close the underlying socket\n          // a reconnection will be attempted\n          this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n          this.forceDisconnect();\n        }, this.connectionTimeout);\n      }\n      this.debug('Opening Web Socket...');\n      // Get the actual WebSocket (or a similar object)\n      const webSocket = this._createWebSocket();\n      this._stompHandler = new StompHandler(this, webSocket, {\n        debug: this.debug,\n        stompVersions: this.stompVersions,\n        connectHeaders: this.connectHeaders,\n        disconnectHeaders: this._disconnectHeaders,\n        heartbeatIncoming: this.heartbeatIncoming,\n        heartbeatOutgoing: this.heartbeatOutgoing,\n        splitLargeFrames: this.splitLargeFrames,\n        maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n        forceBinaryWSFrames: this.forceBinaryWSFrames,\n        logRawCommunication: this.logRawCommunication,\n        appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n        discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n        onConnect: frame => {\n          // Successfully connected, stop the connection watcher\n          if (this._connectionWatcher) {\n            clearTimeout(this._connectionWatcher);\n            this._connectionWatcher = undefined;\n          }\n          if (!this.active) {\n            this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n            this._disposeStompHandler();\n            return;\n          }\n          this.onConnect(frame);\n        },\n        onDisconnect: frame => {\n          this.onDisconnect(frame);\n        },\n        onStompError: frame => {\n          this.onStompError(frame);\n        },\n        onWebSocketClose: evt => {\n          this._stompHandler = undefined; // a new one will be created in case of a reconnect\n          if (this.state === ActivationState.DEACTIVATING) {\n            // Mark deactivation complete\n            this._resolveSocketClose();\n            this._resolveSocketClose = undefined;\n            this._changeState(ActivationState.INACTIVE);\n          }\n          this.onWebSocketClose(evt);\n          // The callback is called before attempting to reconnect, this would allow the client\n          // to be `deactivated` in the callback.\n          if (this.active) {\n            this._schedule_reconnect();\n          }\n        },\n        onWebSocketError: evt => {\n          this.onWebSocketError(evt);\n        },\n        onUnhandledMessage: message => {\n          this.onUnhandledMessage(message);\n        },\n        onUnhandledReceipt: frame => {\n          this.onUnhandledReceipt(frame);\n        },\n        onUnhandledFrame: frame => {\n          this.onUnhandledFrame(frame);\n        }\n      });\n      this._stompHandler.start();\n    });\n  }\n  _createWebSocket() {\n    let webSocket;\n    if (this.webSocketFactory) {\n      webSocket = this.webSocketFactory();\n    } else {\n      webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n    }\n    webSocket.binaryType = 'arraybuffer';\n    return webSocket;\n  }\n  _schedule_reconnect() {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n      this._reconnector = setTimeout(() => {\n        this._connect();\n      }, this.reconnectDelay);\n    }\n  }\n  /**\n   * Disconnect if connected and stop auto reconnect loop.\n   * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n   *\n   * This call is async, it will resolve immediately if there is no underlying active websocket,\n   * otherwise, it will resolve after underlying websocket is properly disposed.\n   *\n   * To reactivate you can call [Client#activate]{@link Client#activate}.\n   */\n  deactivate() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let retPromise;\n      if (this.state !== ActivationState.ACTIVE) {\n        this.debug(`Already ${ActivationState[this.state]}, ignoring call to deactivate`);\n        return Promise.resolve();\n      }\n      this._changeState(ActivationState.DEACTIVATING);\n      // Clear if a reconnection was scheduled\n      if (this._reconnector) {\n        clearTimeout(this._reconnector);\n      }\n      if (this._stompHandler && this.webSocket.readyState !== StompSocketState.CLOSED) {\n        // we need to wait for underlying websocket to close\n        retPromise = new Promise((resolve, reject) => {\n          this._resolveSocketClose = resolve;\n        });\n      } else {\n        // indicate that auto reconnect loop should terminate\n        this._changeState(ActivationState.INACTIVE);\n        return Promise.resolve();\n      }\n      this._disposeStompHandler();\n      return retPromise;\n    });\n  }\n  /**\n   * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n   * This is different than a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n   * After forcing disconnect, automatic reconnect will be attempted.\n   * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n   */\n  forceDisconnect() {\n    if (this._stompHandler) {\n      this._stompHandler.forceDisconnect();\n    }\n  }\n  _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n      this._stompHandler = null;\n    }\n  }\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations.\n   *\n   * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n   *\n   * `body` must be String.\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\n   *\n   * To send a binary message body use binaryBody parameter. It should be a\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n   * Sometimes brokers may not support binary frames out of the box.\n   * Please check your broker documentation.\n   *\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n   * For binary messages `content-length` header is always added.\n   *\n   * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n   * and `content-length` header is missing.\n   *\n   * ```javascript\n   *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   * ```\n   */\n  publish(params) {\n    this._stompHandler.publish(params);\n  }\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {@link FrameImpl} will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Subscribing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n   *\n   *\n   *        // Publishing with acknowledgement\n   *        receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   * ```\n   */\n  watchForReceipt(receiptId, callback) {\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n  /**\n   * Subscribe to a STOMP Broker location. The callback will be invoked for each received message with\n   * the {@link IMessage} as argument.\n   *\n   * Note: The library will generate an unique ID if there is none provided in the headers.\n   *       To use your own ID, pass it using the headers argument.\n   *\n   * ```javascript\n   *        callback = function(message) {\n   *        // called when the client receives a STOMP message from the server\n   *          if (message.body) {\n   *            alert(\"got message with body \" + message.body)\n   *          } else {\n   *            alert(\"got empty message\");\n   *          }\n   *        });\n   *\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\n   *\n   *        // Explicit subscription id\n   *        var mySubId = 'my-subscription-id-001';\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n   * ```\n   */\n  subscribe(destination, callback, headers = {}) {\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n  /**\n   * It is preferable to unsubscribe from a subscription by calling\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n   *\n   * ```javascript\n   *        var subscription = client.subscribe(destination, onmessage);\n   *        // ...\n   *        subscription.unsubscribe();\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n   */\n  unsubscribe(id, headers = {}) {\n    this._stompHandler.unsubscribe(id, headers);\n  }\n  /**\n   * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n   * and [abort]{@link ITransaction#abort}.\n   *\n   * `transactionId` is optional, if not passed the library will generate it internally.\n   */\n  begin(transactionId) {\n    return this._stompHandler.begin(transactionId);\n  }\n  /**\n   * Commit a transaction.\n   *\n   * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.commit();\n   * ```\n   */\n  commit(transactionId) {\n    this._stompHandler.commit(transactionId);\n  }\n  /**\n   * Abort a transaction.\n   * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.abort();\n   * ```\n   */\n  abort(transactionId) {\n    this._stompHandler.abort(transactionId);\n  }\n  /**\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n   * on the {@link IMessage} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // acknowledge it\n   *          message.ack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  ack(messageId, subscriptionId, headers = {}) {\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n  /**\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n   * on the {@link IMessage} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // an error occurs, nack it\n   *          message.nack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  nack(messageId, subscriptionId, headers = {}) {\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","StompHandler","ActivationState","StompSocketState","Versions","Client","constructor","conf","stompVersions","default","connectionTimeout","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","appendMissingNULLonIncoming","state","INACTIVE","noOp","debug","beforeConnect","onConnect","onDisconnect","onUnhandledMessage","onUnhandledReceipt","onUnhandledFrame","onStompError","onWebSocketClose","onWebSocketError","logRawCommunication","onChangeState","connectHeaders","_disconnectHeaders","configure","webSocket","_stompHandler","_webSocket","undefined","disconnectHeaders","connected","connectedVersion","active","ACTIVE","_changeState","Object","assign","activate","DEACTIVATING","Error","_connect","_connectionWatcher","clearTimeout","setTimeout","forceDisconnect","_createWebSocket","discardWebsocketOnCommFailure","frame","_disposeStompHandler","evt","_resolveSocketClose","_schedule_reconnect","message","start","webSocketFactory","WebSocket","brokerURL","protocolVersions","binaryType","_reconnector","deactivate","retPromise","readyState","CLOSED","dispose","publish","params","watchForReceipt","receiptId","callback","subscribe","destination","headers","unsubscribe","id","begin","transactionId","commit","abort","ack","messageId","subscriptionId","nack"],"sources":["C:/Users/hp/coChat/node_modules/@stomp/rx-stomp/node_modules/@stomp/stompjs/esm6/client.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StompHandler } from './stomp-handler';\nimport { ActivationState, StompSocketState, } from './types';\nimport { Versions } from './versions';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n    /**\n     * Create an instance.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n         *\n         * Example:\n         * ```javascript\n         *        // Try only versions 1.0 and 1.1\n         *        client.stompVersions = new Versions(['1.0', '1.1'])\n         * ```\n         */\n        this.stompVersions = Versions.default;\n        /**\n         * Will retry if Stomp connection is not established in specified milliseconds.\n         * Default 0, which implies wait for ever.\n         */\n        this.connectionTimeout = 0;\n        /**\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * This switches on a non standard behavior while sending WebSocket packets.\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n         * Only Java Spring brokers seems to use this mode.\n         *\n         * WebSockets, by itself, split large (text) packets,\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\n         * Actually setting it for such broker will cause large messages to fail.\n         *\n         * `false` by default.\n         *\n         * Binary frames are never split.\n         */\n        this.splitLargeFrames = false;\n        /**\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Usually the\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n         * is automatically decided by type of the payload.\n         * Default is `false`, which should work with all compliant brokers.\n         *\n         * Set this flag to force binary frames.\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * A bug in ReactNative chops a string on occurrence of a NULL.\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n         * This makes incoming WebSocket messages invalid STOMP packets.\n         * Setting this flag attempts to reverse the damage by appending a NULL.\n         * If the broker splits a large message into multiple WebSocket messages,\n         * this flag will cause data loss and abnormal termination of connection.\n         *\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Activation state.\n         *\n         * It will usually be ACTIVE or INACTIVE.\n         * When deactivating it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n         */\n        this.state = ActivationState.INACTIVE;\n        // Dummy callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Underlying WebSocket instance, READONLY.\n     */\n    get webSocket() {\n        return this._stompHandler ? this._stompHandler._webSocket : undefined;\n    }\n    /**\n     * Disconnection headers.\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * `true` if there is a active connection with STOMP Broker\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n    get active() {\n        return this.state === ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Update configuration.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    activate() {\n        if (this.state === ActivationState.DEACTIVATING) {\n            this.debug('Still DEACTIVATING, please await call to deactivate before trying to re-activate');\n            throw new Error('Still DEACTIVATING, can not activate now');\n        }\n        if (this.active) {\n            this.debug('Already ACTIVE, ignoring request to activate');\n            return;\n        }\n        this._changeState(ActivationState.ACTIVE);\n        this._connect();\n    }\n    _connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connected) {\n                this.debug('STOMP: already connected, nothing to do');\n                return;\n            }\n            yield this.beforeConnect();\n            if (!this.active) {\n                this.debug('Client has been marked inactive, will not attempt to connect');\n                return;\n            }\n            // setup connection watcher\n            if (this.connectionTimeout > 0) {\n                // clear first\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                }\n                this._connectionWatcher = setTimeout(() => {\n                    if (this.connected) {\n                        return;\n                    }\n                    // Connection not established, close the underlying socket\n                    // a reconnection will be attempted\n                    this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                    this.forceDisconnect();\n                }, this.connectionTimeout);\n            }\n            this.debug('Opening Web Socket...');\n            // Get the actual WebSocket (or a similar object)\n            const webSocket = this._createWebSocket();\n            this._stompHandler = new StompHandler(this, webSocket, {\n                debug: this.debug,\n                stompVersions: this.stompVersions,\n                connectHeaders: this.connectHeaders,\n                disconnectHeaders: this._disconnectHeaders,\n                heartbeatIncoming: this.heartbeatIncoming,\n                heartbeatOutgoing: this.heartbeatOutgoing,\n                splitLargeFrames: this.splitLargeFrames,\n                maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n                forceBinaryWSFrames: this.forceBinaryWSFrames,\n                logRawCommunication: this.logRawCommunication,\n                appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n                discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n                onConnect: frame => {\n                    // Successfully connected, stop the connection watcher\n                    if (this._connectionWatcher) {\n                        clearTimeout(this._connectionWatcher);\n                        this._connectionWatcher = undefined;\n                    }\n                    if (!this.active) {\n                        this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                        this._disposeStompHandler();\n                        return;\n                    }\n                    this.onConnect(frame);\n                },\n                onDisconnect: frame => {\n                    this.onDisconnect(frame);\n                },\n                onStompError: frame => {\n                    this.onStompError(frame);\n                },\n                onWebSocketClose: evt => {\n                    this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                    if (this.state === ActivationState.DEACTIVATING) {\n                        // Mark deactivation complete\n                        this._resolveSocketClose();\n                        this._resolveSocketClose = undefined;\n                        this._changeState(ActivationState.INACTIVE);\n                    }\n                    this.onWebSocketClose(evt);\n                    // The callback is called before attempting to reconnect, this would allow the client\n                    // to be `deactivated` in the callback.\n                    if (this.active) {\n                        this._schedule_reconnect();\n                    }\n                },\n                onWebSocketError: evt => {\n                    this.onWebSocketError(evt);\n                },\n                onUnhandledMessage: message => {\n                    this.onUnhandledMessage(message);\n                },\n                onUnhandledReceipt: frame => {\n                    this.onUnhandledReceipt(frame);\n                },\n                onUnhandledFrame: frame => {\n                    this.onUnhandledFrame(frame);\n                },\n            });\n            this._stompHandler.start();\n        });\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this.reconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                this._connect();\n            }, this.reconnectDelay);\n        }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n     *\n     * This call is async, it will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after underlying websocket is properly disposed.\n     *\n     * To reactivate you can call [Client#activate]{@link Client#activate}.\n     */\n    deactivate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let retPromise;\n            if (this.state !== ActivationState.ACTIVE) {\n                this.debug(`Already ${ActivationState[this.state]}, ignoring call to deactivate`);\n                return Promise.resolve();\n            }\n            this._changeState(ActivationState.DEACTIVATING);\n            // Clear if a reconnection was scheduled\n            if (this._reconnector) {\n                clearTimeout(this._reconnector);\n            }\n            if (this._stompHandler &&\n                this.webSocket.readyState !== StompSocketState.CLOSED) {\n                // we need to wait for underlying websocket to close\n                retPromise = new Promise((resolve, reject) => {\n                    this._resolveSocketClose = resolve;\n                });\n            }\n            else {\n                // indicate that auto reconnect loop should terminate\n                this._changeState(ActivationState.INACTIVE);\n                return Promise.resolve();\n            }\n            this._disposeStompHandler();\n            return retPromise;\n        });\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different than a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n            this._stompHandler = null;\n        }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body use binaryBody parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n     * and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(params) {\n        this._stompHandler.publish(params);\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n     * random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based in the value of the receipt-id.\n     *\n     * This method allow watching for a receipt and invoke the callback\n     * when corresponding receipt has been received.\n     *\n     * The actual {@link FrameImpl} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    watchForReceipt(receiptId, callback) {\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each received message with\n     * the {@link IMessage} as argument.\n     *\n     * Note: The library will generate an unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the headers argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    subscribe(destination, callback, headers = {}) {\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    unsubscribe(id, headers = {}) {\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    begin(transactionId) {\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    commit(transactionId) {\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    abort(transactionId) {\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,eAAeA,CAACC,SAAS,EAAEC,QAAQ,EAAE;IACjC,IAAI,CAAC3C,aAAa,CAACyC,eAAe,CAACC,SAAS,EAAEC,QAAQ,CAAC;EAC3D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,SAASA,CAACC,WAAW,EAAEF,QAAQ,EAAEG,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3C,OAAO,IAAI,CAAC9C,aAAa,CAAC4C,SAAS,CAACC,WAAW,EAAEF,QAAQ,EAAEG,OAAO,CAAC;EACvE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,EAAE,EAAEF,OAAO,GAAG,CAAC,CAAC,EAAE;IAC1B,IAAI,CAAC9C,aAAa,CAAC+C,WAAW,CAACC,EAAE,EAAEF,OAAO,CAAC;EAC/C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIG,KAAKA,CAACC,aAAa,EAAE;IACjB,OAAO,IAAI,CAAClD,aAAa,CAACiD,KAAK,CAACC,aAAa,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAMA,CAACD,aAAa,EAAE;IAClB,IAAI,CAAClD,aAAa,CAACmD,MAAM,CAACD,aAAa,CAAC;EAC5C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,KAAKA,CAACF,aAAa,EAAE;IACjB,IAAI,CAAClD,aAAa,CAACoD,KAAK,CAACF,aAAa,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,GAAGA,CAACC,SAAS,EAAEC,cAAc,EAAET,OAAO,GAAG,CAAC,CAAC,EAAE;IACzC,IAAI,CAAC9C,aAAa,CAACqD,GAAG,CAACC,SAAS,EAAEC,cAAc,EAAET,OAAO,CAAC;EAC9D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIU,IAAIA,CAACF,SAAS,EAAEC,cAAc,EAAET,OAAO,GAAG,CAAC,CAAC,EAAE;IAC1C,IAAI,CAAC9C,aAAa,CAACwD,IAAI,CAACF,SAAS,EAAEC,cAAc,EAAET,OAAO,CAAC;EAC/D;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}
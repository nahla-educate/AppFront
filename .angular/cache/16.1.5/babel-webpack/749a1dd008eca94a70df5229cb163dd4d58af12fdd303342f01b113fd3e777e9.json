{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-webstorage\";\nexport class AuthData {}\nexport class LoginService {\n  constructor(http, localStorageService) {\n    this.http = http;\n    this.localStorageService = localStorageService;\n    this.apiUrl = `http://localhost:8080/api/auth`;\n    const storedUser = localStorage.getItem('user');\n    this.userSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n    this.user = this.userSubject.asObservable();\n  }\n  register(registerData) {\n    const registerUrl = `${this.apiUrl}/register`;\n    return this.http.post(registerUrl, registerData);\n  }\n  authenticate(authenticationRequest) {\n    return this.http.post(`${this.apiUrl}/authenticate`, authenticationRequest);\n  }\n  loginyes(data) {\n    console.log(\"I'am server\");\n    return this.http.post(`${this.apiUrl}/login`, data);\n  }\n  login(loginPayload) {\n    return this.http.post(this.apiUrl + '/login', loginPayload).pipe(map(data => {\n      this.localStorageService.store('authenticationToken', data.token);\n      this.localStorageService.store('user', data.user);\n      this.userSubject.next(data.user); // Update the userSubject with the logged-in user\n      console.log(data.user);\n      return true;\n    }));\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","map","AuthData","LoginService","constructor","http","localStorageService","apiUrl","storedUser","localStorage","getItem","userSubject","JSON","parse","user","asObservable","register","registerData","registerUrl","post","authenticate","authenticationRequest","loginyes","data","console","log","login","loginPayload","pipe","store","token","next","i0","ɵɵinject","i1","HttpClient","i2","LocalStorageService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\hp\\coChat\\src\\app\\services\\login.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, map } from 'rxjs';\nimport { LocalStorageService } from 'ngx-webstorage';\n\nexport interface RegisterData {\n  userName: string;\n  userMail: string;\n  userPassword: string;\n}\n\nexport class AuthData {\n  userMail: string | undefined;\n  userPassword: string | undefined;\n}\n\nexport interface AuthenticationResponse {\n  token: string;\n  message: string;\n  user: AuthData;\n  // Other properties if needed\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n  private apiUrl = `http://localhost:8080/api/auth`;\n  private userSubject: BehaviorSubject<AuthData | null>;\n  public user: Observable<AuthData | null>;\n\n  constructor(private http: HttpClient, private localStorageService: LocalStorageService) {\n    const storedUser = localStorage.getItem('user');\n    this.userSubject = new BehaviorSubject<AuthData | null>(storedUser ? JSON.parse(storedUser) : null);\n    this.user = this.userSubject.asObservable();\n  }\n\n  register(registerData: RegisterData): Observable<AuthenticationResponse> {\n    const registerUrl = `${this.apiUrl}/register`;\n    return this.http.post<AuthenticationResponse>(registerUrl, registerData);\n  }\n\n  authenticate(authenticationRequest: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/authenticate`, authenticationRequest);\n  }\n\n  loginyes(data: any):Observable<any>{\n    console.log(\"I'am server\");\n    return this.http.post(`${this.apiUrl}/login`, data);\n  }\n\n  login(loginPayload: AuthData): Observable<boolean> {\n    return this.http.post<AuthenticationResponse>(this.apiUrl + '/login', loginPayload).pipe(\n      map(data => {\n        this.localStorageService.store('authenticationToken', data.token);\n        this.localStorageService.store('user', data.user);\n        this.userSubject.next(data.user); // Update the userSubject with the logged-in user\n        console.log(data.user);\n        return true;\n      })\n    );\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;;;;AASvD,OAAM,MAAOC,QAAQ;AAerB,OAAM,MAAOC,YAAY;EAKvBC,YAAoBC,IAAgB,EAAUC,mBAAwC;IAAlE,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,mBAAmB,GAAnBA,mBAAmB;IAJzD,KAAAC,MAAM,GAAG,gCAAgC;IAK/C,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAI,CAACC,WAAW,GAAG,IAAIX,eAAe,CAAkBQ,UAAU,GAAGI,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,GAAG,IAAI,CAAC;IACnG,IAAI,CAACM,IAAI,GAAG,IAAI,CAACH,WAAW,CAACI,YAAY,EAAE;EAC7C;EAEAC,QAAQA,CAACC,YAA0B;IACjC,MAAMC,WAAW,GAAG,GAAG,IAAI,CAACX,MAAM,WAAW;IAC7C,OAAO,IAAI,CAACF,IAAI,CAACc,IAAI,CAAyBD,WAAW,EAAED,YAAY,CAAC;EAC1E;EAEAG,YAAYA,CAACC,qBAA0B;IACrC,OAAO,IAAI,CAAChB,IAAI,CAACc,IAAI,CAAM,GAAG,IAAI,CAACZ,MAAM,eAAe,EAAEc,qBAAqB,CAAC;EAClF;EAEAC,QAAQA,CAACC,IAAS;IAChBC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1B,OAAO,IAAI,CAACpB,IAAI,CAACc,IAAI,CAAC,GAAG,IAAI,CAACZ,MAAM,QAAQ,EAAEgB,IAAI,CAAC;EACrD;EAEAG,KAAKA,CAACC,YAAsB;IAC1B,OAAO,IAAI,CAACtB,IAAI,CAACc,IAAI,CAAyB,IAAI,CAACZ,MAAM,GAAG,QAAQ,EAAEoB,YAAY,CAAC,CAACC,IAAI,CACtF3B,GAAG,CAACsB,IAAI,IAAG;MACT,IAAI,CAACjB,mBAAmB,CAACuB,KAAK,CAAC,qBAAqB,EAAEN,IAAI,CAACO,KAAK,CAAC;MACjE,IAAI,CAACxB,mBAAmB,CAACuB,KAAK,CAAC,MAAM,EAAEN,IAAI,CAACT,IAAI,CAAC;MACjD,IAAI,CAACH,WAAW,CAACoB,IAAI,CAACR,IAAI,CAACT,IAAI,CAAC,CAAC,CAAC;MAClCU,OAAO,CAACC,GAAG,CAACF,IAAI,CAACT,IAAI,CAAC;MACtB,OAAO,IAAI;IACb,CAAC,CAAC,CACH;EACH;;AAnCWX,YAAY,C;mBAAZA,YAAY,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA;AAAA;AAAZlC,YAAY,C;SAAZA,YAAY;EAAAmC,OAAA,EAAZnC,YAAY,CAAAoC,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __decorate } from \"tslib\";\n/*import { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\nimport { HttpClient } from '@angular/common/http';\ninterface User {\n  userId: number;\n  userName: string;\n  userMail: string;\n  // Add more properties as needed\n}\ninterface InvitationMessage {\n  sender: string;\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'coChat';\n  userList: User[] = [];\n  webSocketAPI!: WebSocketAPI;\n  selectedRecipient: string = '';\n  users: string[] = ['User1', 'User2', 'User3']; // Replace this with your list of users\n\n  greeting: any;\n  name: string = '';\n  messageContent: string = '';\n  messages: { sender: string, receiver: string, content: string }[] = [];\n\n  searchQuery: string = '';\n  searchResults: any[] = [];\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n    this.fetchUserList();\n  }\n  fetchUserList() {\n    this.http.get<User[]>('http://localhost:8080/api/auth/list').subscribe(\n      (response) => {\n        this.userList = response;\n      },\n      (error) => {\n        console.error('Error fetching user list:', error);\n      }\n    );\n  }\n\n  connect() {\n    this.webSocketAPI._connect();\n  }\n\n  disconnect() {\n    this.webSocketAPI._disconnect();\n  }\n\n  // Method to set the user's name during signup\n  setUser(name: string) {\n    this.name = name;\n  }\n\n  sendMessage() {\n    if (this.messageContent.trim() === '' || this.selectedRecipient.trim() === '') {\n      return; // Don't send empty messages or if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: this.messageContent\n    }));\n\n    // Add the sent message to the messages list\n    this.messages.push({ sender: this.name, receiver: this.selectedRecipient, content: this.messageContent });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n\n  sendInvitation() {\n    if (this.selectedRecipient.trim() === '') {\n      return; // Don't send invitations if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: \"Invitation from \" + this.name // Customize the invitation content as needed\n    }));\n  }\n\n  searchUsers() {\n    if (!this.searchQuery) {\n      // Empty search query, clear the search results\n      this.searchResults = [];\n      return;\n    }\n\n    // Call the backend API to retrieve the search results\n    this.http.get<any[]>(`http://localhost:8080/api/auth/users?userName=${this.searchQuery}`).subscribe(\n      (response) => {\n        this.searchResults = response;\n        console.log('search results', response);\n      },\n      (error) => {\n        console.error('Error fetching search results:', error);\n      }\n    );\n  }\n\n  sendInvitationn(user: any) {\n    if (!user || !user.userName) {\n      return; // Invalid user, handle error if needed\n    }\n  \n    console.log(\"Sending invitation to user:\", user.userName);\n  \n    // Call the WebSocketAPI to send the invitation\n    this.webSocketAPI._sendInvitation(JSON.stringify({ sender: this.name }));\n    \n    // Handle the invitation logic here, e.g., display a notification or confirmation message\n    // You can customize this according to your requirements\n    alert(\"Invitation sent to \" + user.userName);\n  }\n\n  handleMessage(message: any) {\n    console.log(\"Message Received from Server :: \", message);\n\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({ sender: parsedMessage.sender, receiver: parsedMessage.recipient, content: parsedMessage.content });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n}\n\n*/\nimport { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\nexport let AppComponent = class AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.title = 'coChat';\n    this.userList = [];\n    this.selectedRecipient = null; // Store the selected recipient\n    this.name = '';\n    this.messageContent = '';\n    this.messages = [];\n    this.searchQuery = '';\n    this.searchResults = [];\n  }\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n    this.fetchUserList();\n  }\n  fetchUserList() {\n    this.http.get('http://localhost:8080/api/auth/list').subscribe(response => {\n      this.userList = response;\n    }, error => {\n      console.error('Error fetching user list:', error);\n    });\n  }\n  connect() {\n    this.webSocketAPI._connect();\n  }\n  disconnect() {\n    this.webSocketAPI._disconnect();\n  }\n  // Method to set the user's name during signup\n  setUser(name) {\n    this.name = name;\n  }\n  sendMessage() {\n    if (!this.selectedRecipient || !this.messageContent.trim()) {\n      return; // Don't send empty messages or if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient.userName,\n      content: this.messageContent\n    }));\n    // Add the sent message to the messages list\n    this.messages.push({\n      sender: this.name,\n      receiver: this.selectedRecipient.userName,\n      content: this.messageContent\n    });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n\n  sendInvitation() {\n    if (!this.selectedRecipient) {\n      return; // Don't send invitations if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient.userName,\n      content: \"Invitation from \" + this.name // Customize the invitation content as needed\n    }));\n  }\n\n  searchUsers() {\n    if (!this.searchQuery) {\n      // Empty search query, clear the search results\n      this.searchResults = [];\n      return;\n    }\n    // Call the backend API to retrieve the search results\n    this.http.get(`http://localhost:8080/api/auth/users?userName=${this.searchQuery}`).subscribe(response => {\n      this.searchResults = response;\n      console.log('search results', response);\n    }, error => {\n      console.error('Error fetching search results:', error);\n    });\n  }\n  selectUser(user) {\n    // Set the selected recipient when a user is clicked from the search results\n    this.selectedRecipient = user;\n  }\n  handleMessage(message) {\n    console.log(\"Message Received from Server :: \", message);\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({\n          sender: parsedMessage.sender,\n          receiver: parsedMessage.recipient,\n          content: parsedMessage.content\n        });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","WebSocketAPI","AppComponent","constructor","http","title","userList","selectedRecipient","name","messageContent","messages","searchQuery","searchResults","ngOnInit","webSocketAPI","fetchUserList","get","subscribe","response","error","console","connect","_connect","disconnect","_disconnect","setUser","sendMessage","trim","_send","JSON","stringify","sender","recipient","userName","content","push","receiver","sendInvitation","searchUsers","log","selectUser","user","handleMessage","message","parsedMessage","parse","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\hp\\coChat\\src\\app\\app.component.ts"],"sourcesContent":["/*import { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\nimport { HttpClient } from '@angular/common/http';\ninterface User {\n  userId: number;\n  userName: string;\n  userMail: string;\n  // Add more properties as needed\n}\ninterface InvitationMessage {\n  sender: string;\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'coChat';\n  userList: User[] = [];\n  webSocketAPI!: WebSocketAPI;\n  selectedRecipient: string = '';\n  users: string[] = ['User1', 'User2', 'User3']; // Replace this with your list of users\n\n  greeting: any;\n  name: string = '';\n  messageContent: string = '';\n  messages: { sender: string, receiver: string, content: string }[] = [];\n\n  searchQuery: string = '';\n  searchResults: any[] = [];\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n    this.fetchUserList();\n  }\n  fetchUserList() {\n    this.http.get<User[]>('http://localhost:8080/api/auth/list').subscribe(\n      (response) => {\n        this.userList = response;\n      },\n      (error) => {\n        console.error('Error fetching user list:', error);\n      }\n    );\n  }\n\n  connect() {\n    this.webSocketAPI._connect();\n  }\n\n  disconnect() {\n    this.webSocketAPI._disconnect();\n  }\n\n  // Method to set the user's name during signup\n  setUser(name: string) {\n    this.name = name;\n  }\n\n  sendMessage() {\n    if (this.messageContent.trim() === '' || this.selectedRecipient.trim() === '') {\n      return; // Don't send empty messages or if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: this.messageContent\n    }));\n\n    // Add the sent message to the messages list\n    this.messages.push({ sender: this.name, receiver: this.selectedRecipient, content: this.messageContent });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n\n  sendInvitation() {\n    if (this.selectedRecipient.trim() === '') {\n      return; // Don't send invitations if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: \"Invitation from \" + this.name // Customize the invitation content as needed\n    }));\n  }\n\n  searchUsers() {\n    if (!this.searchQuery) {\n      // Empty search query, clear the search results\n      this.searchResults = [];\n      return;\n    }\n\n    // Call the backend API to retrieve the search results\n    this.http.get<any[]>(`http://localhost:8080/api/auth/users?userName=${this.searchQuery}`).subscribe(\n      (response) => {\n        this.searchResults = response;\n        console.log('search results', response);\n      },\n      (error) => {\n        console.error('Error fetching search results:', error);\n      }\n    );\n  }\n\n  sendInvitationn(user: any) {\n    if (!user || !user.userName) {\n      return; // Invalid user, handle error if needed\n    }\n  \n    console.log(\"Sending invitation to user:\", user.userName);\n  \n    // Call the WebSocketAPI to send the invitation\n    this.webSocketAPI._sendInvitation(JSON.stringify({ sender: this.name }));\n    \n    // Handle the invitation logic here, e.g., display a notification or confirmation message\n    // You can customize this according to your requirements\n    alert(\"Invitation sent to \" + user.userName);\n  }\n\n  handleMessage(message: any) {\n    console.log(\"Message Received from Server :: \", message);\n\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({ sender: parsedMessage.sender, receiver: parsedMessage.recipient, content: parsedMessage.content });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n}\n\n*/\nimport { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\nimport { HttpClient } from '@angular/common/http';\n\ninterface User {\n  userId: number;\n  userName: string;\n  userMail: string;\n  // Add more properties as needed\n}\n\ninterface InvitationMessage {\n  sender: string;\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'coChat';\n  userList: User[] = [];\n  webSocketAPI!: WebSocketAPI;\n  selectedRecipient: User | null = null; // Store the selected recipient\n  greeting: any;\n  name: string = '';\n  messageContent: string = '';\n  messages: { sender: string, receiver: string, content: string }[] = [];\n\n  searchQuery: string = '';\n  searchResults: User[] = [];\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n    this.fetchUserList();\n  }\n\n  fetchUserList() {\n    this.http.get<User[]>('http://localhost:8080/api/auth/list').subscribe(\n      (response) => {\n        this.userList = response;\n      },\n      (error) => {\n        console.error('Error fetching user list:', error);\n      }\n    );\n  }\n\n  connect() {\n    this.webSocketAPI._connect();\n  }\n\n  disconnect() {\n    this.webSocketAPI._disconnect();\n  }\n\n  // Method to set the user's name during signup\n  setUser(name: string) {\n    this.name = name;\n  }\n\n  sendMessage() {\n    if (!this.selectedRecipient || !this.messageContent.trim()) {\n      return; // Don't send empty messages or if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient.userName,\n      content: this.messageContent\n    }));\n\n    // Add the sent message to the messages list\n    this.messages.push({ sender: this.name, receiver: this.selectedRecipient.userName, content: this.messageContent });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n\n  sendInvitation() {\n    if (!this.selectedRecipient) {\n      return; // Don't send invitations if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient.userName,\n      content: \"Invitation from \" + this.name // Customize the invitation content as needed\n    }));\n  }\n\n  searchUsers() {\n    if (!this.searchQuery) {\n      // Empty search query, clear the search results\n      this.searchResults = [];\n      return;\n    }\n\n    // Call the backend API to retrieve the search results\n    this.http.get<User[]>(`http://localhost:8080/api/auth/users?userName=${this.searchQuery}`).subscribe(\n      (response) => {\n        this.searchResults = response;\n        console.log('search results', response);\n      },\n      (error) => {\n        console.error('Error fetching search results:', error);\n      }\n    );\n  }\n\n  selectUser(user: User) {\n    // Set the selected recipient when a user is clicked from the search results\n    this.selectedRecipient = user;\n  }\n\n  handleMessage(message: any) {\n    console.log(\"Message Received from Server :: \", message);\n\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({ sender: parsedMessage.sender, receiver: parsedMessage.recipient, content: parsedMessage.content });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as Stomp from 'stompjs';\nimport * as SockJS from 'sockjs-client';\nexport class WebSocketAPI {\n  constructor(appComponent) {\n    this.webSocketEndPoint = 'http://localhost:8080/ws';\n    this.topic = \"/topic/greetings\";\n    this.appComponent = appComponent;\n  }\n  _connect() {\n    console.log(\"Initialize WebSocket Connection\");\n    let ws = new SockJS(this.webSocketEndPoint);\n    this.stompClient = Stomp.over(ws);\n    const _this = this;\n    _this.stompClient.connect({}, function (frame) {\n      _this.stompClient.subscribe(_this.topic, function (sdkEvent) {\n        _this.onMessageReceived(sdkEvent);\n      });\n    }, this.errorCallBack);\n  }\n  _disconnect() {\n    if (this.stompClient !== null) {\n      this.stompClient.disconnect();\n    }\n    console.log(\"Disconnected\");\n  }\n  // On error, schedule a reconnection attempt\n  errorCallBack(error) {\n    console.log(\"errorCallBack -> \" + error);\n    setTimeout(() => {\n      this._connect();\n    }, 5000);\n  }\n  /**\n   * Send message to the server via web socket\n   * @param {*} message\n   */\n  _send(message) {\n    console.log(\"Calling WebSocket API to send message\");\n    const sender = this.appComponent.name;\n    const payload = {\n      sender,\n      message\n    };\n    //app/invitations/send\n    this.stompClient.send(\"/hello\", {}, JSON.stringify(payload));\n  }\n  _sendHelloMessage(recipient, content) {\n    const payload = {\n      sender: this.appComponent.name,\n      recipient,\n      content,\n      type: \"chat\"\n    };\n    this._send(payload, \"/app/chat\");\n  }\n  // Method to handle invitation sending\n  _sendInvitation(message) {\n    console.log(\"Calling WebSocket API to send invitation\");\n    const sender = this.appComponent.name;\n    const payload = {\n      sender,\n      message\n    };\n    //app/invitations/send\n    this.stompClient.send(\"/invitation\", {}, JSON.stringify(payload));\n  }\n  onBroadcastReceived(message) {\n    console.log(\"Broadcast Received from Server :: \" + message);\n    // Handle the broadcasted message here, e.g., add it to the messages list\n    this.appComponent.handleMessage(JSON.stringify(message));\n  }\n  onMessageReceived(message) {\n    console.log(\"Message Received from Server :: \" + message);\n    this.appComponent.handleMessage(JSON.stringify(message.substring));\n    /* const parsedMessage = JSON.parse(message);\n       this.appComponent.handleMessage(parsedMessage.body);*/\n  }\n}","map":{"version":3,"names":["Stomp","SockJS","WebSocketAPI","constructor","appComponent","webSocketEndPoint","topic","_connect","console","log","ws","stompClient","over","_this","connect","frame","subscribe","sdkEvent","onMessageReceived","errorCallBack","_disconnect","disconnect","error","setTimeout","_send","message","sender","name","payload","send","JSON","stringify","_sendHelloMessage","recipient","content","type","_sendInvitation","onBroadcastReceived","handleMessage","substring"],"sources":["C:\\Users\\hp\\coChat\\src\\app\\services\\WebSocketAPI.ts"],"sourcesContent":["import * as Stomp from 'stompjs';\r\nimport * as SockJS from 'sockjs-client';\r\nimport { AppComponent } from '../app.component';\r\n\r\nexport class WebSocketAPI {\r\n  webSocketEndPoint: string = 'http://localhost:8080/ws';\r\n  topic: string = \"/topic/greetings\";\r\n  stompClient: any;\r\n  appComponent: AppComponent;\r\n\r\n  constructor(appComponent: AppComponent) {\r\n    this.appComponent = appComponent;\r\n  }\r\n\r\n  _connect() {\r\n    console.log(\"Initialize WebSocket Connection\");\r\n    let ws = new SockJS(this.webSocketEndPoint);\r\n    this.stompClient = Stomp.over(ws);\r\n    const _this = this;\r\n    _this.stompClient.connect({}, function (frame: any) {\r\n      _this.stompClient.subscribe(_this.topic, function (sdkEvent: any) {\r\n        _this.onMessageReceived(sdkEvent);\r\n      });\r\n    }, this.errorCallBack);\r\n  };\r\n\r\n  _disconnect() {\r\n    if (this.stompClient !== null) {\r\n      this.stompClient.disconnect();\r\n    }\r\n    console.log(\"Disconnected\");\r\n  }\r\n\r\n  // On error, schedule a reconnection attempt\r\n  errorCallBack(error: string) {\r\n    console.log(\"errorCallBack -> \" + error);\r\n    setTimeout(() => {\r\n      this._connect();\r\n    }, 5000);\r\n  }\r\n\r\n  /**\r\n   * Send message to the server via web socket\r\n   * @param {*} message\r\n   */\r\n  _send(message: string) {\r\n    console.log(\"Calling WebSocket API to send message\");\r\n    const sender = this.appComponent.name;\r\n    const payload = { sender, message };\r\n    //app/invitations/send\r\n    this.stompClient.send(\"/hello\", {}, JSON.stringify(payload));\r\n  }\r\n  _sendHelloMessage(recipient: string, content: string) {\r\n    const payload = {\r\n      sender: this.appComponent.name,\r\n      recipient,\r\n      content,\r\n      type: \"chat\"\r\n    };\r\n    this._send(payload, \"/app/chat\");\r\n  }\r\n\r\n\r\n  // Method to handle invitation sending\r\n  _sendInvitation(message: string) {\r\n    console.log(\"Calling WebSocket API to send invitation\");\r\n    const sender = this.appComponent.name;\r\n    const payload = { sender, message };\r\n    //app/invitations/send\r\n    this.stompClient.send(\"/invitation\", {}, JSON.stringify(payload));\r\n  }\r\n  onBroadcastReceived(message: any) {\r\n    console.log(\"Broadcast Received from Server :: \" + message);\r\n    // Handle the broadcasted message here, e.g., add it to the messages list\r\n    this.appComponent.handleMessage(JSON.stringify(message));\r\n  }\r\n\r\n  onMessageReceived(message: any) {\r\n    console.log(\"Message Received from Server :: \" + message);\r\n    this.appComponent.handleMessage(JSON.stringify(message.substring));\r\n    /* const parsedMessage = JSON.parse(message);\r\n       this.appComponent.handleMessage(parsedMessage.body);*/\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
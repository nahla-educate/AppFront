{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let LoginComponent = class LoginComponent {\n  constructor(formBuilder, authService, service, router, socialService) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.service = service;\n    this.router = router;\n    this.socialService = socialService;\n    this.type = \"password\";\n    this.isText = false;\n    this.eyeIcon = \"fa-eye-slash\";\n    this.userMail = \"\";\n    this.userPassword = \"\";\n    this.siteKey = '6LfltwkbAAAAAEG_xuXSPuAtxgxxvKi_jFxaNcjN';\n    this.siteKey = '6LeVa84aAAAAAB4myWaDKDK5DJptQQjzSq_Ix2NP';\n    this.loginForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6), Validators.maxLength(64)])\n    });\n    this.loginPayload = {\n      email: '',\n      password: ''\n    };\n  }\n  ngOnInit() {}\n  get email() {\n    return this.loginForm.get('email');\n  }\n  get password() {\n    return this.loginForm.get('password');\n  }\n  onSubmit() {\n    this.loginPayload.email = this.loginForm.get('email').value;\n    this.loginPayload.password = this.loginForm.get('password').value;\n    if (this.loginForm.invalid) {\n      alert('Votre formulaire est invalide.');\n    } else {\n      this.authService.login(this.loginPayload).subscribe(data => {\n        if (data) {\n          console.log(\"login success\");\n          this.router.navigateByUrl(`/`);\n        } else {\n          console.log(\"login failed\");\n        }\n      });\n    }\n  }\n  hideShowPass() {\n    this.isText = !this.isText;\n    this.isText ? this.eyeIcon = \"fa-eye\" : this.eyeIcon = \"fa-eye-slash\";\n    this.isText ? this.type = \"text\" : this.type = \"password\";\n  }\n  login(loginForm) {\n    const authData = {\n      userMail: this.userMail,\n      userPassword: this.userPassword\n    };\n    this.service.login(authData).subscribe(response => {\n      console.log(response);\n      if (response.message === \"Email not exists\") {\n        alert(\"Email not exists\");\n      } else if (response.message === \"Login Success\") {\n        // Save the token in localStorage and sessionStorage\n        localStorage.setItem('token', response.token);\n        sessionStorage.setItem('token', response.token);\n        // You can also store other user-related data if you receive them in the response\n        // For example, to store the user's email:\n        localStorage.setItem('userEmail', authData.userMail);\n        sessionStorage.setItem('userEmail', authData.userMail);\n        this.router.navigateByUrl('/register'); // Navigate to the desired page after successful login\n      } else {\n        alert(\"Incorrect email or password\");\n      }\n    }, error => {\n      console.error('Error authenticating user:', error);\n      alert('An error occurred during authentication');\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","LoginComponent","constructor","formBuilder","authService","service","router","socialService","type","isText","eyeIcon","userMail","userPassword","siteKey","loginForm","FormGroup","email","FormControl","Validators","required","password","minLength","maxLength","loginPayload","ngOnInit","get","onSubmit","value","invalid","alert","login","subscribe","data","console","log","navigateByUrl","hideShowPass","authData","response","message","localStorage","setItem","token","sessionStorage","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\hp\\coChat\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthData, AuthenticationResponse, LoginService } from 'src/app/services/login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit{\n  type: string = \"password\";\n  isText: boolean = false;\n  eyeIcon:string = \"fa-eye-slash\";\n\n  userMail: string=\"\";\n  userPassword: string=\"\";\n\n  constructor(private formBuilder: FormBuilder, private authService: LoginService, private service: LoginService,private router:Router,\n    private socialService: SocialAuthService) {\n   this.siteKey = '6LfltwkbAAAAAEG_xuXSPuAtxgxxvKi_jFxaNcjN';\n  this.siteKey ='6LeVa84aAAAAAB4myWaDKDK5DJptQQjzSq_Ix2NP';\n\n  this.loginForm = new FormGroup({\n    email: new FormControl('', [\n      Validators.required,\n      Validators.email\n    ]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(6),\n      Validators.maxLength(64),\n     \n    ])\n  });\n  this.loginPayload = {\n    email: '',\n    password: ''\n  };\n  }\n  ngOnInit():void{\n    \n  }\n  get email(){return this.loginForm.get('email')}\n  get password(){return this.loginForm.get('password')}\n  onSubmit(){\n    this.loginPayload.email = this.loginForm.get('email').value;\n    this.loginPayload.password = this.loginForm.get('password').value;\n    if (this.loginForm.invalid){\n      alert('Votre formulaire est invalide.');\n    }else{\n    this.authService.login(this.loginPayload).subscribe( data => {\n      if(data) {\n        console.log(\"login success\");\n        this.router.navigateByUrl(`/`);\n      } else {\n        console.log(\"login failed\")\n      }\n    });\n    }\n\n\n  }\n  hideShowPass(){\n    this.isText = !this.isText;\n    this.isText? this.eyeIcon = \"fa-eye\" : this.eyeIcon = \"fa-eye-slash\";\n    this.isText ? this.type = \"text\": this.type = \"password\";\n  }\n\n \n  login(loginForm: NgForm) {\n    const authData: AuthData = {\n      userMail: this.userMail,\n      userPassword: this.userPassword\n    };\n\n    this.service.login(authData).subscribe(\n      (response: AuthenticationResponse) => {\n        console.log(response);\n\n        if (response.message === \"Email not exists\") {\n          alert(\"Email not exists\");\n        } else if (response.message === \"Login Success\") {\n          // Save the token in localStorage and sessionStorage\n          localStorage.setItem('token', response.token);\n          sessionStorage.setItem('token', response.token);\n\n          // You can also store other user-related data if you receive them in the response\n          // For example, to store the user's email:\n          localStorage.setItem('userEmail', authData.userMail);\n          sessionStorage.setItem('userEmail', authData.userMail);\n\n          this.router.navigateByUrl('/register'); // Navigate to the desired page after successful login\n        } else {\n          alert(\"Incorrect email or password\");\n        }\n      },\n      (error) => {\n        console.error('Error authenticating user:', error);\n        alert('An error occurred during authentication');\n      }\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
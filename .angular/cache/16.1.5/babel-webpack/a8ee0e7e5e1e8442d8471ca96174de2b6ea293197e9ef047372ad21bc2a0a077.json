{"ast":null,"code":"import { Injectable, Optional } from '@angular/core';\nimport { RxStomp, RxStompState, RxStompRPCConfig, RxStompRPC, RxStompConfig } from '@stomp/rx-stomp';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nexport { StompHeaders } from '@stomp/stompjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nconst StompState = {\n  CLOSED: 0,\n  TRYING: 1,\n  CONNECTED: 2,\n  DISCONNECTING: 3\n};\nStompState[StompState.CLOSED] = \"CLOSED\";\nStompState[StompState.TRYING] = \"TRYING\";\nStompState[StompState.CONNECTED] = \"CONNECTED\";\nStompState[StompState.DISCONNECTING] = \"DISCONNECTING\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {\\@link RxStompService}.\n * It will be dropped `\\@stomp/ng2-stompjs\\@8.x.x`.**\n *\n * Angular2 STOMP Raw Service using \\@stomp/stomp.js\n *\n * You will only need the public properties and\n * methods listed unless you are an advanced user. This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you will like to pass the configuration as a dependency,\n * please use StompService class.\n */\nclass StompRService extends RxStomp {\n  constructor() {\n    super();\n    this.state = new BehaviorSubject(StompState.CLOSED);\n    this.connectionState$.subscribe(st => {\n      this.state.next(StompRService._mapStompState(st));\n    });\n  }\n  /**\n   * @param {?} st\n   * @return {?}\n   */\n  static _mapStompState(st) {\n    if (st === RxStompState.CONNECTING) {\n      return StompState.TRYING;\n    }\n    if (st === RxStompState.OPEN) {\n      return StompState.CONNECTED;\n    }\n    if (st === RxStompState.CLOSING) {\n      return StompState.DISCONNECTING;\n    }\n    if (st === RxStompState.CLOSED) {\n      return StompState.CLOSED;\n    }\n  }\n  /**\n   * Will trigger when connection is established. Use this to carry out initialization.\n   * It will trigger every time a (re)connection occurs. If it is already connected\n   * it will trigger immediately. You can safely ignore the value, as it will always be\n   * StompState.CONNECTED\n   * @return {?}\n   */\n  get connectObservable() {\n    return this.connected$.pipe(map(st => {\n      return StompRService._mapStompState(st);\n    }));\n  }\n  /**\n   * Provides headers from most recent connection to the server as return by the CONNECTED\n   * frame.\n   * If the STOMP connection has already been established it will trigger immediately.\n   * It will additionally trigger in event of reconnection, the value will be set of headers from\n   * the recent server response.\n   * @return {?}\n   */\n  get serverHeadersObservable() {\n    return this.serverHeaders$;\n  }\n  /**\n   * Will emit all messages to the default queue (any message that are not handled by a subscription)\n   * @return {?}\n   */\n  get defaultMessagesObservable() {\n    return this.unhandledMessage$;\n  }\n  /**\n   * Will emit all receipts\n   * @return {?}\n   */\n  get receiptsObservable() {\n    return this.unhandledReceipts$;\n  }\n  /**\n   * Will trigger when an error occurs. This Subject can be used to handle errors from\n   * the stomp broker.\n   * @return {?}\n   */\n  get errorSubject() {\n    return this.stompErrors$;\n  }\n  /**\n   * Set configuration\n   * @param {?} config\n   * @return {?}\n   */\n  set config(config) {\n    const /** @type {?} */rxStompConfig = {};\n    if (typeof config.url === 'string') {\n      rxStompConfig.brokerURL = config.url;\n    } else {\n      rxStompConfig.webSocketFactory = config.url;\n    }\n    // Configure client heart-beating\n    rxStompConfig.heartbeatIncoming = config.heartbeat_in;\n    rxStompConfig.heartbeatOutgoing = config.heartbeat_out;\n    // Auto reconnect\n    rxStompConfig.reconnectDelay = config.reconnect_delay;\n    if (config.debug) {\n      rxStompConfig.debug = str => {\n        console.log(new Date(), str);\n      };\n    }\n    rxStompConfig.connectHeaders = config.headers;\n    this.configure(rxStompConfig);\n  }\n  /**\n   * It will connect to the STOMP broker.\n   * @return {?}\n   */\n  initAndConnect() {\n    // disconnect if connected\n    this.deactivate();\n    // Attempt connection, passing in a callback\n    this.activate();\n  }\n  /**\n   * It will disconnect from the STOMP broker.\n   * @return {?}\n   */\n  disconnect() {\n    this.deactivate();\n  }\n  /**\n   * It will send a message to a named destination. The message must be `string`.\n   *\n   * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n   * publish queued messages as soon as the broker gets connected.\n   *\n   * @param {?} queueName\n   * @param {?=} message\n   * @param {?=} headers\n   * @return {?}\n   */\n  publish(queueName, message, headers = {}) {\n    if (typeof queueName === 'string') {\n      super.publish({\n        destination: /** @type {?} */queueName,\n        body: message,\n        headers\n      });\n    } else {\n      const /** @type {?} */pubParams = queueName;\n      super.publish(pubParams);\n    }\n  }\n  /**\n   * It will subscribe to server message queues\n   *\n   * This method can be safely called even if the STOMP broker is not connected.\n   * If the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\n   *\n   * If a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\n   * do not understand what it means, please leave it as is.\n   *\n   * Note that when working with temporary queues where the subscription request\n   * creates the\n   * underlying queue, messages might be missed during reconnect. This issue is not specific\n   * to this library but the way STOMP brokers are designed to work.\n   *\n   * @param {?} queueName\n   * @param {?=} headers\n   * @return {?}\n   */\n  subscribe(queueName, headers = {}) {\n    return this.watch(queueName, headers);\n  }\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {\\@link Frame}\n   * will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.waitForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   * ```\n   *\n   * Maps to: [Client#watchForReceipt]{\\@link Client#watchForReceipt}\n   * @param {?} receiptId\n   * @param {?} callback\n   * @return {?}\n   */\n  waitForReceipt(receiptId, callback) {\n    super.watchForReceipt(receiptId, callback);\n  }\n  /**\n   * @return {?}\n   */\n  get client() {\n    return this._stompClient;\n  }\n}\nStompRService.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\nStompRService.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {\\@link InjectableRxStompConfig}.\n * It will be dropped `\\@stomp/ng2-stompjs\\@8.x.x`.**\n *\n * Represents a configuration object for the\n * STOMPService to connect to.\n *\n * This name conflicts with a class of the same name in \\@stomp/stompjs, excluding this from the documentation.\n *\n * \\@internal\n */\nclass StompConfig {}\nStompConfig.decorators = [{\n  type: Injectable\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {\\@link RxStompService} with {\\@link rxStompServiceFactory}.\n * It will be dropped `\\@stomp/ng2-stompjs\\@8.x.x`.**\n *\n * Angular2 STOMP Service using \\@stomp/stomp.js\n *\n * \\@description This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you want to manually configure and initialize the service\n * please use StompRService\n */\nclass StompService extends StompRService {\n  /**\n   * Constructor\n   *\n   * See README and samples for configuration examples\n   * @param {?} config\n   */\n  constructor(config) {\n    super();\n    this.config = config;\n    this.initAndConnect();\n  }\n}\nStompService.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\nStompService.ctorParameters = () => [{\n  type: StompConfig\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {\\@link RxStomp} with exactly same functionality.\n * Please see {\\@link RxStomp} for details.\n *\n * See: {\\@link /guide/ng2-stompjs/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * See also {\\@link rxStompServiceFactory}.\n */\nclass RxStompService extends RxStomp {}\nRxStompService.decorators = [{\n  type: Injectable\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * Injectable version of {\\@link RxStompRPCConfig}.\n *\n * See guide at {\\@link /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html}\n */\nclass InjectableRxStompRPCConfig extends RxStompRPCConfig {}\nInjectableRxStompRPCConfig.decorators = [{\n  type: Injectable\n}];\n/**\n * Deprecated, use {\\@link InjectableRxStompRPCConfig} instead\n */\nconst /** @type {?} */InjectableRxStompRpcConfig = InjectableRxStompRPCConfig;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * Injectable version of {\\@link RxStompRPC}.\n *\n * See guide at {\\@link /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html}\n */\nclass RxStompRPCService extends RxStompRPC {\n  /**\n   * Create an instance, typically called by Angular Dependency Injection framework.\n   *\n   * @param {?} rxStomp\n   * @param {?=} stompRPCConfig\n   */\n  constructor(rxStomp, stompRPCConfig) {\n    super(rxStomp, stompRPCConfig);\n  }\n}\nRxStompRPCService.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\nRxStompRPCService.ctorParameters = () => [{\n  type: RxStompService\n}, {\n  type: InjectableRxStompRPCConfig,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {\\@link RxStompConfig} with exactly same functionality.\n * Please see {\\@link RxStompConfig} for details.\n *\n * See: {\\@link /guide/ng2-stompjs/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * If all fields of configuration are fixed and known in advance you would typically define\n * a `const` and inject it using value.\n *\n * If some fields will be known by later, it can be injected using a factory function.\n *\n * Occasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n */\nclass InjectableRxStompConfig extends RxStompConfig {}\nInjectableRxStompConfig.decorators = [{\n  type: Injectable\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * This is factory function that can create {\\@link RxStompService}\n * when configuration is already known.\n * You can use this function for defining provider for {\\@link RxStompService}.\n * {\\@link RxStompService} created using this function is configured and activated.\n * This provides the simplest mechanism to define {\\@link RxStompService} for Dependency Injection.\n *\n * See: {\\@link /guide/ng2-stompjs/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n * @param {?} rxStompConfig\n * @return {?}\n */\nfunction rxStompServiceFactory(rxStompConfig) {\n  const /** @type {?} */rxStompService = new RxStompService();\n  rxStompService.configure(rxStompConfig);\n  rxStompService.activate();\n  return rxStompService;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { StompRService, StompService, StompState, StompConfig, RxStompRPCService, RxStompService, InjectableRxStompConfig, InjectableRxStompRPCConfig, InjectableRxStompRpcConfig, rxStompServiceFactory };","map":{"version":3,"names":["Injectable","Optional","RxStomp","RxStompState","RxStompRPCConfig","RxStompRPC","RxStompConfig","BehaviorSubject","map","StompHeaders","StompState","CLOSED","TRYING","CONNECTED","DISCONNECTING","StompRService","constructor","state","connectionState$","subscribe","st","next","_mapStompState","CONNECTING","OPEN","CLOSING","connectObservable","connected$","pipe","serverHeadersObservable","serverHeaders$","defaultMessagesObservable","unhandledMessage$","receiptsObservable","unhandledReceipts$","errorSubject","stompErrors$","config","rxStompConfig","url","brokerURL","webSocketFactory","heartbeatIncoming","heartbeat_in","heartbeatOutgoing","heartbeat_out","reconnectDelay","reconnect_delay","debug","str","console","log","Date","connectHeaders","headers","configure","initAndConnect","deactivate","activate","disconnect","publish","queueName","message","destination","body","pubParams","watch","waitForReceipt","receiptId","callback","watchForReceipt","client","_stompClient","decorators","type","ctorParameters","StompConfig","StompService","RxStompService","InjectableRxStompRPCConfig","InjectableRxStompRpcConfig","RxStompRPCService","rxStomp","stompRPCConfig","InjectableRxStompConfig","rxStompServiceFactory","rxStompService"],"sources":["C:/Users/hp/coChat/node_modules/@stomp/ng2-stompjs/fesm2015/stomp-ng2-stompjs.js"],"sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport { RxStomp, RxStompState, RxStompRPCConfig, RxStompRPC, RxStompConfig } from '@stomp/rx-stomp';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nexport { StompHeaders } from '@stomp/stompjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nconst StompState = {\n    CLOSED: 0,\n    TRYING: 1,\n    CONNECTED: 2,\n    DISCONNECTING: 3,\n};\nStompState[StompState.CLOSED] = \"CLOSED\";\nStompState[StompState.TRYING] = \"TRYING\";\nStompState[StompState.CONNECTED] = \"CONNECTED\";\nStompState[StompState.DISCONNECTING] = \"DISCONNECTING\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {\\@link RxStompService}.\n * It will be dropped `\\@stomp/ng2-stompjs\\@8.x.x`.**\n *\n * Angular2 STOMP Raw Service using \\@stomp/stomp.js\n *\n * You will only need the public properties and\n * methods listed unless you are an advanced user. This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you will like to pass the configuration as a dependency,\n * please use StompService class.\n */\nclass StompRService extends RxStomp {\n    constructor() {\n        super();\n        this.state = new BehaviorSubject(StompState.CLOSED);\n        this.connectionState$.subscribe((st) => {\n            this.state.next(StompRService._mapStompState(st));\n        });\n    }\n    /**\n     * @param {?} st\n     * @return {?}\n     */\n    static _mapStompState(st) {\n        if (st === RxStompState.CONNECTING) {\n            return StompState.TRYING;\n        }\n        if (st === RxStompState.OPEN) {\n            return StompState.CONNECTED;\n        }\n        if (st === RxStompState.CLOSING) {\n            return StompState.DISCONNECTING;\n        }\n        if (st === RxStompState.CLOSED) {\n            return StompState.CLOSED;\n        }\n    }\n    /**\n     * Will trigger when connection is established. Use this to carry out initialization.\n     * It will trigger every time a (re)connection occurs. If it is already connected\n     * it will trigger immediately. You can safely ignore the value, as it will always be\n     * StompState.CONNECTED\n     * @return {?}\n     */\n    get connectObservable() {\n        return this.connected$.pipe(map((st) => {\n            return StompRService._mapStompState(st);\n        }));\n    }\n    /**\n     * Provides headers from most recent connection to the server as return by the CONNECTED\n     * frame.\n     * If the STOMP connection has already been established it will trigger immediately.\n     * It will additionally trigger in event of reconnection, the value will be set of headers from\n     * the recent server response.\n     * @return {?}\n     */\n    get serverHeadersObservable() {\n        return this.serverHeaders$;\n    }\n    /**\n     * Will emit all messages to the default queue (any message that are not handled by a subscription)\n     * @return {?}\n     */\n    get defaultMessagesObservable() {\n        return this.unhandledMessage$;\n    }\n    /**\n     * Will emit all receipts\n     * @return {?}\n     */\n    get receiptsObservable() {\n        return this.unhandledReceipts$;\n    }\n    /**\n     * Will trigger when an error occurs. This Subject can be used to handle errors from\n     * the stomp broker.\n     * @return {?}\n     */\n    get errorSubject() {\n        return this.stompErrors$;\n    }\n    /**\n     * Set configuration\n     * @param {?} config\n     * @return {?}\n     */\n    set config(config) {\n        const /** @type {?} */ rxStompConfig = {};\n        if (typeof config.url === 'string') {\n            rxStompConfig.brokerURL = config.url;\n        }\n        else {\n            rxStompConfig.webSocketFactory = config.url;\n        }\n        // Configure client heart-beating\n        rxStompConfig.heartbeatIncoming = config.heartbeat_in;\n        rxStompConfig.heartbeatOutgoing = config.heartbeat_out;\n        // Auto reconnect\n        rxStompConfig.reconnectDelay = config.reconnect_delay;\n        if (config.debug) {\n            rxStompConfig.debug = (str) => {\n                console.log(new Date(), str);\n            };\n        }\n        rxStompConfig.connectHeaders = config.headers;\n        this.configure(rxStompConfig);\n    }\n    /**\n     * It will connect to the STOMP broker.\n     * @return {?}\n     */\n    initAndConnect() {\n        // disconnect if connected\n        this.deactivate();\n        // Attempt connection, passing in a callback\n        this.activate();\n    }\n    /**\n     * It will disconnect from the STOMP broker.\n     * @return {?}\n     */\n    disconnect() {\n        this.deactivate();\n    }\n    /**\n     * It will send a message to a named destination. The message must be `string`.\n     *\n     * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n     * publish queued messages as soon as the broker gets connected.\n     *\n     * @param {?} queueName\n     * @param {?=} message\n     * @param {?=} headers\n     * @return {?}\n     */\n    publish(queueName, message, headers = {}) {\n        if (typeof queueName === 'string') {\n            super.publish({\n                destination: /** @type {?} */ (queueName),\n                body: message,\n                headers,\n            });\n        }\n        else {\n            const /** @type {?} */ pubParams = queueName;\n            super.publish(pubParams);\n        }\n    }\n    /**\n     * It will subscribe to server message queues\n     *\n     * This method can be safely called even if the STOMP broker is not connected.\n     * If the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\n     *\n     * If a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\n     * do not understand what it means, please leave it as is.\n     *\n     * Note that when working with temporary queues where the subscription request\n     * creates the\n     * underlying queue, messages might be missed during reconnect. This issue is not specific\n     * to this library but the way STOMP brokers are designed to work.\n     *\n     * @param {?} queueName\n     * @param {?=} headers\n     * @return {?}\n     */\n    subscribe(queueName, headers = {}) {\n        return this.watch(queueName, headers);\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n     * random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based in the value of the receipt-id.\n     *\n     * This method allow watching for a receipt and invoke the callback\n     * when corresponding receipt has been received.\n     *\n     * The actual {\\@link Frame}\n     * will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Publishing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        rxStomp.waitForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        rxStomp.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     *\n     * Maps to: [Client#watchForReceipt]{\\@link Client#watchForReceipt}\n     * @param {?} receiptId\n     * @param {?} callback\n     * @return {?}\n     */\n    waitForReceipt(receiptId, callback) {\n        super.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * @return {?}\n     */\n    get client() {\n        return this._stompClient;\n    }\n}\nStompRService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nStompRService.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {\\@link InjectableRxStompConfig}.\n * It will be dropped `\\@stomp/ng2-stompjs\\@8.x.x`.**\n *\n * Represents a configuration object for the\n * STOMPService to connect to.\n *\n * This name conflicts with a class of the same name in \\@stomp/stompjs, excluding this from the documentation.\n *\n * \\@internal\n */\nclass StompConfig {\n}\nStompConfig.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {\\@link RxStompService} with {\\@link rxStompServiceFactory}.\n * It will be dropped `\\@stomp/ng2-stompjs\\@8.x.x`.**\n *\n * Angular2 STOMP Service using \\@stomp/stomp.js\n *\n * \\@description This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you want to manually configure and initialize the service\n * please use StompRService\n */\nclass StompService extends StompRService {\n    /**\n     * Constructor\n     *\n     * See README and samples for configuration examples\n     * @param {?} config\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n        this.initAndConnect();\n    }\n}\nStompService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nStompService.ctorParameters = () => [\n    { type: StompConfig, },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {\\@link RxStomp} with exactly same functionality.\n * Please see {\\@link RxStomp} for details.\n *\n * See: {\\@link /guide/ng2-stompjs/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * See also {\\@link rxStompServiceFactory}.\n */\nclass RxStompService extends RxStomp {\n}\nRxStompService.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * Injectable version of {\\@link RxStompRPCConfig}.\n *\n * See guide at {\\@link /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html}\n */\nclass InjectableRxStompRPCConfig extends RxStompRPCConfig {\n}\nInjectableRxStompRPCConfig.decorators = [\n    { type: Injectable }\n];\n/**\n * Deprecated, use {\\@link InjectableRxStompRPCConfig} instead\n */\nconst /** @type {?} */ InjectableRxStompRpcConfig = InjectableRxStompRPCConfig;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * Injectable version of {\\@link RxStompRPC}.\n *\n * See guide at {\\@link /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html}\n */\nclass RxStompRPCService extends RxStompRPC {\n    /**\n     * Create an instance, typically called by Angular Dependency Injection framework.\n     *\n     * @param {?} rxStomp\n     * @param {?=} stompRPCConfig\n     */\n    constructor(rxStomp, stompRPCConfig) {\n        super(rxStomp, stompRPCConfig);\n    }\n}\nRxStompRPCService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nRxStompRPCService.ctorParameters = () => [\n    { type: RxStompService, },\n    { type: InjectableRxStompRPCConfig, decorators: [{ type: Optional },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {\\@link RxStompConfig} with exactly same functionality.\n * Please see {\\@link RxStompConfig} for details.\n *\n * See: {\\@link /guide/ng2-stompjs/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * If all fields of configuration are fixed and known in advance you would typically define\n * a `const` and inject it using value.\n *\n * If some fields will be known by later, it can be injected using a factory function.\n *\n * Occasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n */\nclass InjectableRxStompConfig extends RxStompConfig {\n}\nInjectableRxStompConfig.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Part of `\\@stomp/ng2-stompjs`.\n *\n * This is factory function that can create {\\@link RxStompService}\n * when configuration is already known.\n * You can use this function for defining provider for {\\@link RxStompService}.\n * {\\@link RxStompService} created using this function is configured and activated.\n * This provides the simplest mechanism to define {\\@link RxStompService} for Dependency Injection.\n *\n * See: {\\@link /guide/ng2-stompjs/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n * @param {?} rxStompConfig\n * @return {?}\n */\nfunction rxStompServiceFactory(rxStompConfig) {\n    const /** @type {?} */ rxStompService = new RxStompService();\n    rxStompService.configure(rxStompConfig);\n    rxStompService.activate();\n    return rxStompService;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { StompRService, StompService, StompState, StompConfig, RxStompRPCService, RxStompService, InjectableRxStompConfig, InjectableRxStompRPCConfig, InjectableRxStompRpcConfig, rxStompServiceFactory };\n\n"],"mappings":"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D,aAAa,CAAC0D,UAAU,GAAG,CACvB;EAAEC,IAAI,EAAE1E;AAAW,CAAC,CACvB;AACD;AACAe,aAAa,CAAC4D,cAAc,GAAG,MAAM,EAAE;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,CAAC;AAElBA,WAAW,CAACH,UAAU,GAAG,CACrB;EAAEC,IAAI,EAAE1E;AAAW,CAAC,CACvB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM6E,YAAY,SAAS9D,aAAa,CAAC;EACrC;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACqB,MAAM,EAAE;IAChB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACmB,cAAc,CAAC,CAAC;EACzB;AACJ;AACAqB,YAAY,CAACJ,UAAU,GAAG,CACtB;EAAEC,IAAI,EAAE1E;AAAW,CAAC,CACvB;AACD;AACA6E,YAAY,CAACF,cAAc,GAAG,MAAM,CAChC;EAAED,IAAI,EAAEE;AAAa,CAAC,CACzB;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,cAAc,SAAS5E,OAAO,CAAC;AAErC4E,cAAc,CAACL,UAAU,GAAG,CACxB;EAAEC,IAAI,EAAE1E;AAAW,CAAC,CACvB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM+E,0BAA0B,SAAS3E,gBAAgB,CAAC;AAE1D2E,0BAA0B,CAACN,UAAU,GAAG,CACpC;EAAEC,IAAI,EAAE1E;AAAW,CAAC,CACvB;AACD;AACA;AACA;AACA,MAAM,gBAAiBgF,0BAA0B,GAAGD,0BAA0B;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,iBAAiB,SAAS5E,UAAU,CAAC;EACvC;AACJ;AACA;AACA;AACA;AACA;EACIW,WAAWA,CAACkE,OAAO,EAAEC,cAAc,EAAE;IACjC,KAAK,CAACD,OAAO,EAAEC,cAAc,CAAC;EAClC;AACJ;AACAF,iBAAiB,CAACR,UAAU,GAAG,CAC3B;EAAEC,IAAI,EAAE1E;AAAW,CAAC,CACvB;AACD;AACAiF,iBAAiB,CAACN,cAAc,GAAG,MAAM,CACrC;EAAED,IAAI,EAAEI;AAAgB,CAAC,EACzB;EAAEJ,IAAI,EAAEK,0BAA0B;EAAEN,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEzE;EAAS,CAAC;AAAG,CAAC,CAC1E;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmF,uBAAuB,SAAS9E,aAAa,CAAC;AAEpD8E,uBAAuB,CAACX,UAAU,GAAG,CACjC;EAAEC,IAAI,EAAE1E;AAAW,CAAC,CACvB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqF,qBAAqBA,CAAC/C,aAAa,EAAE;EAC1C,MAAM,gBAAiBgD,cAAc,GAAG,IAAIR,cAAc,CAAC,CAAC;EAC5DQ,cAAc,CAAC/B,SAAS,CAACjB,aAAa,CAAC;EACvCgD,cAAc,CAAC5B,QAAQ,CAAC,CAAC;EACzB,OAAO4B,cAAc;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAASvE,aAAa,EAAE8D,YAAY,EAAEnE,UAAU,EAAEkE,WAAW,EAAEK,iBAAiB,EAAEH,cAAc,EAAEM,uBAAuB,EAAEL,0BAA0B,EAAEC,0BAA0B,EAAEK,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as Stomp from 'stompjs';\nimport * as SockJS from 'sockjs-client';\nexport class WebSocketAPI {\n  constructor(appComponent) {\n    this.webSocketEndPoint = 'http://localhost:8080/ws';\n    this.topic = \"/topic/greetings\";\n    this.appComponent = appComponent;\n  }\n  _connect() {\n    console.log(\"Initialize WebSocket Connection\");\n    let ws = new SockJS(this.webSocketEndPoint);\n    this.stompClient = Stomp.over(ws);\n    const _this = this;\n    _this.stompClient.connect({}, function (frame) {\n      _this.stompClient.subscribe(_this.topic, function (sdkEvent) {\n        _this.onMessageReceived(sdkEvent);\n      });\n      //_this.stompClient.reconnect_delay = 2000;\n    }, this.errorCallBack);\n  }\n  _disconnect() {\n    if (this.stompClient !== null) {\n      this.stompClient.disconnect();\n    }\n    console.log(\"Disconnected\");\n  }\n  // on error, schedule a reconnection attempt\n  errorCallBack(error) {\n    console.log(\"errorCallBack -> \" + error);\n    setTimeout(() => {\n      this._connect();\n    }, 5000);\n  }\n  /**\n   * Send message to sever via web socket\n   * @param {*} message\n   */\n  /*_send(message: string) {\n      console.log(\"calling logout api via web socket\");\n      this.stompClient.send(\"/app/hello\", {}, JSON.stringify(message));\n  }*/\n  /* _send(message: string) {\n       console.log(\"calling logout api via web socket\");\n       const sender = this.appComponent.name;\n       const payload = { sender, message };\n       this.stompClient.send(\"/app/hello\", {}, JSON.stringify(payload));\n     }*/\n  _send(message) {\n    console.log(\"calling WebSocket API to send message\");\n    const sender = this.appComponent.name;\n    const payload = {\n      sender,\n      message\n    };\n    this.stompClient.send(\"/app/api/invitations/send\", {}, JSON.stringify(payload));\n  }\n  // Modify the WebSocketAPI class to handle invitation sending\n  _sendInvitation(message) {\n    console.log(\"calling WebSocket API to send invitation\");\n    this.stompClient.send(\"/app/invitations/send\", {}, JSON.stringify({\n      sender: this.name\n    }));\n  }\n  onMessageReceived(message) {\n    console.log(\"Message Recieved from Server :: \" + message);\n    this.appComponent.handleMessage(JSON.stringify(message.substring));\n    /* const parsedMessage = JSON.parse(message);\n     this.appComponent.handleMessage(parsedMessage.body);*/\n  }\n}","map":{"version":3,"names":["Stomp","SockJS","WebSocketAPI","constructor","appComponent","webSocketEndPoint","topic","_connect","console","log","ws","stompClient","over","_this","connect","frame","subscribe","sdkEvent","onMessageReceived","errorCallBack","_disconnect","disconnect","error","setTimeout","_send","message","sender","name","payload","send","JSON","stringify","_sendInvitation","handleMessage","substring"],"sources":["C:\\Users\\hp\\coChat\\src\\app\\services\\WebSocketAPI.ts"],"sourcesContent":["import * as Stomp from 'stompjs';\r\nimport * as SockJS from 'sockjs-client';\r\nimport { AppComponent } from '../app.component';\r\n\r\nexport class WebSocketAPI {\r\n    webSocketEndPoint: string = 'http://localhost:8080/ws';\r\n    topic: string = \"/topic/greetings\";\r\n    stompClient: any;\r\n    appComponent: AppComponent;\r\n    constructor(appComponent: AppComponent){\r\n        this.appComponent = appComponent;\r\n    }\r\n    _connect() {\r\n        console.log(\"Initialize WebSocket Connection\");\r\n        let ws = new SockJS(this.webSocketEndPoint);\r\n        this.stompClient = Stomp.over(ws);\r\n        const _this = this;\r\n        _this.stompClient.connect({}, function (frame: any) {\r\n            _this.stompClient.subscribe(_this.topic, function (sdkEvent: any) {\r\n                _this.onMessageReceived(sdkEvent);\r\n            });\r\n            //_this.stompClient.reconnect_delay = 2000;\r\n        }, this.errorCallBack);\r\n    };\r\n\r\n    _disconnect() {\r\n        if (this.stompClient !== null) {\r\n            this.stompClient.disconnect();\r\n        }\r\n        console.log(\"Disconnected\");\r\n    }\r\n\r\n    // on error, schedule a reconnection attempt\r\n    errorCallBack(error: string) {\r\n        console.log(\"errorCallBack -> \" + error)\r\n        setTimeout(() => {\r\n            this._connect();\r\n        }, 5000);\r\n    }\r\n\r\n /**\r\n  * Send message to sever via web socket\r\n  * @param {*} message \r\n  */\r\n    /*_send(message: string) {\r\n        console.log(\"calling logout api via web socket\");\r\n        this.stompClient.send(\"/app/hello\", {}, JSON.stringify(message));\r\n    }*/\r\n   /* _send(message: string) {\r\n        console.log(\"calling logout api via web socket\");\r\n        const sender = this.appComponent.name;\r\n        const payload = { sender, message };\r\n        this.stompClient.send(\"/app/hello\", {}, JSON.stringify(payload));\r\n      }*/\r\n\r\n      _send(message: string) {\r\n        console.log(\"calling WebSocket API to send message\");\r\n        const sender = this.appComponent.name;\r\n        const payload = { sender, message };\r\n        this.stompClient.send(\"/app/api/invitations/send\", {}, JSON.stringify(payload));\r\n      }\r\n      // Modify the WebSocketAPI class to handle invitation sending\r\n_sendInvitation(message: string) {\r\n  console.log(\"calling WebSocket API to send invitation\");\r\n  this.stompClient.send(\"/app/invitations/send\", {}, JSON.stringify({ sender: this.name }));\r\n}\r\n\r\n\r\n   onMessageReceived(message: any) {\r\n        console.log(\"Message Recieved from Server :: \" + message);\r\n        this.appComponent.handleMessage(JSON.stringify(message.substring));\r\n\r\n           /* const parsedMessage = JSON.parse(message);\r\n            this.appComponent.handleMessage(parsedMessage.body);*/\r\n          \r\n          \r\n    }\r\n       /*onMessageReceived(message: any) {\r\n  console.log(\"Message Received from Server :: \", message);\r\n\r\n  // Check if the message contains the \"content\" property with JSON data\r\n  if (typeof message === \"object\" && message.hasOwnProperty(\"content\")) {\r\n    const jsonData = message.content;\r\n\r\n    // Parse the JSON data\r\n    try {\r\n      const parsedMessage = JSON.parse(jsonData);\r\n      // Now you can access properties of the parsed message and handle it accordingly\r\n      console.log(\"Parsed Message:\", parsedMessage);\r\n      this.appComponent.handleMessage(parsedMessage.content);\r\n    } catch (error) {\r\n      console.error(\"Error parsing message:\", error);\r\n    }\r\n  } else {\r\n    console.error(\"Invalid message format:\", message);\r\n  }\r\n}\r\n*/\r\n      \r\n      \r\n      \r\n      \r\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,SAAS;AAChC,OAAO,KAAKC,MAAM,MAAM,eAAe;AAGvC,OAAM,MAAOC,YAAY;EAKrBC,YAAYC,YAA0B;IAJtC,KAAAC,iBAAiB,GAAW,0BAA0B;IACtD,KAAAC,KAAK,GAAW,kBAAkB;IAI9B,IAAI,CAACF,YAAY,GAAGA,YAAY;EACpC;EACAG,QAAQA,CAAA;IACJC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9C,IAAIC,EAAE,GAAG,IAAIT,MAAM,CAAC,IAAI,CAACI,iBAAiB,CAAC;IAC3C,IAAI,CAACM,WAAW,GAAGX,KAAK,CAACY,IAAI,CAACF,EAAE,CAAC;IACjC,MAAMG,KAAK,GAAG,IAAI;IAClBA,KAAK,CAACF,WAAW,CAACG,OAAO,CAAC,EAAE,EAAE,UAAUC,KAAU;MAC9CF,KAAK,CAACF,WAAW,CAACK,SAAS,CAACH,KAAK,CAACP,KAAK,EAAE,UAAUW,QAAa;QAC5DJ,KAAK,CAACK,iBAAiB,CAACD,QAAQ,CAAC;MACrC,CAAC,CAAC;MACF;IACJ,CAAC,EAAE,IAAI,CAACE,aAAa,CAAC;EAC1B;EAEAC,WAAWA,CAAA;IACP,IAAI,IAAI,CAACT,WAAW,KAAK,IAAI,EAAE;MAC3B,IAAI,CAACA,WAAW,CAACU,UAAU,EAAE;;IAEjCb,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAC/B;EAEA;EACAU,aAAaA,CAACG,KAAa;IACvBd,OAAO,CAACC,GAAG,CAAC,mBAAmB,GAAGa,KAAK,CAAC;IACxCC,UAAU,CAAC,MAAK;MACZ,IAAI,CAAChB,QAAQ,EAAE;IACnB,CAAC,EAAE,IAAI,CAAC;EACZ;EAEH;;;;EAIG;;;;EAID;;;;;;EAOGiB,KAAKA,CAACC,OAAe;IACnBjB,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACpD,MAAMiB,MAAM,GAAG,IAAI,CAACtB,YAAY,CAACuB,IAAI;IACrC,MAAMC,OAAO,GAAG;MAAEF,MAAM;MAAED;IAAO,CAAE;IACnC,IAAI,CAACd,WAAW,CAACkB,IAAI,CAAC,2BAA2B,EAAE,EAAE,EAAEC,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC,CAAC;EACjF;EACA;EACNI,eAAeA,CAACP,OAAe;IAC7BjB,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACvD,IAAI,CAACE,WAAW,CAACkB,IAAI,CAAC,uBAAuB,EAAE,EAAE,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEL,MAAM,EAAE,IAAI,CAACC;IAAI,CAAE,CAAC,CAAC;EAC3F;EAGGT,iBAAiBA,CAACO,OAAY;IACzBjB,OAAO,CAACC,GAAG,CAAC,kCAAkC,GAAGgB,OAAO,CAAC;IACzD,IAAI,CAACrB,YAAY,CAAC6B,aAAa,CAACH,IAAI,CAACC,SAAS,CAACN,OAAO,CAACS,SAAS,CAAC,CAAC;IAE/D;;EAIP"},"metadata":{},"sourceType":"module","externalDependencies":[]}
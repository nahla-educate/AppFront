{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/auth';\n    this.requestHeader = new HttpHeaders({\n      'No-Auth': 'True'\n    });\n  }\n  login(bodyData) {\n    return this.http.post(this.apiUrl + '/authenticate', bodyData, {\n      headers: this.requestHeader\n    });\n  }\n  register(registerData) {\n    const registerUrl = `${this.apiUrl}/register`;\n    return this.http.post(registerUrl, registerData);\n  }\n  authenticate(authData) {\n    const loginUrl = `${this.apiUrl}/login`;\n    return this.http.post(loginUrl, authData);\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","LoginService","constructor","http","apiUrl","requestHeader","login","bodyData","post","headers","register","registerData","registerUrl","authenticate","authData","loginUrl","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\hp\\coChat\\src\\app\\services\\login.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nexport interface RegisterData {\n  userName: string;\n  userMail: string;\n  userPassword: string;\n}\n\nexport interface AuthData {\n  userMail: string;\n  userPassword: string;\n}\n\nexport interface AuthenticationResponse {\n  token: string;\n  message: string;\n  // Other properties if needed\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n  private apiUrl = 'http://localhost:8080/api/auth';\n  requestHeader = new HttpHeaders({ 'No-Auth': 'True' });\n\n  constructor(private http: HttpClient) {}\n\n  public login(bodyData: RegisterData) {\n    return this.http.post(this.apiUrl + '/authenticate', bodyData, {\n      headers: this.requestHeader,\n    });\n  }\n\n  register(registerData: RegisterData): Observable<AuthenticationResponse> {\n    const registerUrl = `${this.apiUrl}/register`;\n    return this.http.post<AuthenticationResponse>(registerUrl, registerData);\n  }\n\n  authenticate(authData: AuthData): Observable<AuthenticationResponse> {\n    const loginUrl = `${this.apiUrl}/login`;\n    return this.http.post<AuthenticationResponse>(loginUrl, authData);\n  }\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAwB9D,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,gCAAgC;IACjD,KAAAC,aAAa,GAAG,IAAIL,WAAW,CAAC;MAAE,SAAS,EAAE;IAAM,CAAE,CAAC;EAEf;EAEhCM,KAAKA,CAACC,QAAsB;IACjC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,IAAI,CAACJ,MAAM,GAAG,eAAe,EAAEG,QAAQ,EAAE;MAC7DE,OAAO,EAAE,IAAI,CAACJ;KACf,CAAC;EACJ;EAEAK,QAAQA,CAACC,YAA0B;IACjC,MAAMC,WAAW,GAAG,GAAG,IAAI,CAACR,MAAM,WAAW;IAC7C,OAAO,IAAI,CAACD,IAAI,CAACK,IAAI,CAAyBI,WAAW,EAAED,YAAY,CAAC;EAC1E;EAEAE,YAAYA,CAACC,QAAkB;IAC7B,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACX,MAAM,QAAQ;IACvC,OAAO,IAAI,CAACD,IAAI,CAACK,IAAI,CAAyBO,QAAQ,EAAED,QAAQ,CAAC;EACnE;;AApBWb,YAAY,C;mBAAZA,YAAY,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZlB,YAAY,C;SAAZA,YAAY;EAAAmB,OAAA,EAAZnB,YAAY,CAAAoB,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
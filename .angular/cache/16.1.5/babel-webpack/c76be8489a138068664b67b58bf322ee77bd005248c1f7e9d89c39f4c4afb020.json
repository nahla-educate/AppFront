{"ast":null,"code":"import { WebSocketAPI } from './services/WebSocketAPI';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nfunction AppComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"app-register\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_div_1_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", user_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(user_r5);\n  }\n}\nfunction AppComponent_div_1_div_32_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_1_div_32_li_4_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const user_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r8.sendInvitationn(user_r7));\n    });\n    i0.ɵɵtext(3, \"Invite\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const user_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", user_r7.userName, \" \");\n  }\n}\nfunction AppComponent_div_1_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \"Search Results:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, AppComponent_div_1_div_32_li_4_Template, 4, 1, \"li\", 15);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.searchResults);\n  }\n}\nfunction AppComponent_div_1_tr_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const user_r10 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r10.userId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r10.userName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r10.userMail);\n  }\n}\nfunction AppComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"form\", 4)(5, \"div\", 5)(6, \"label\", 6);\n    i0.ɵɵtext(7, \"WebSocket connection:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_1_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.connect());\n    });\n    i0.ɵɵtext(9, \"Connect\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_1_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.disconnect());\n    });\n    i0.ɵɵtext(11, \"Disconnect\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(12, \"div\", 3)(13, \"form\", 4)(14, \"div\", 5)(15, \"label\", 8);\n    i0.ɵɵtext(16, \"Select recipient:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"select\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function AppComponent_div_1_Template_select_ngModelChange_17_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.selectedRecipient = $event);\n    });\n    i0.ɵɵtemplate(18, AppComponent_div_1_option_18_Template, 2, 2, \"option\", 10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"div\", 5)(20, \"label\", 11);\n    i0.ɵɵtext(21, \"Enter your message:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"input\", 12);\n    i0.ɵɵlistener(\"ngModelChange\", function AppComponent_div_1_Template_input_ngModelChange_22_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.messageContent = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(23, \"br\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_1_Template_button_click_24_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.sendInvitation());\n    });\n    i0.ɵɵtext(25, \"Send Invitation\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_1_Template_button_click_26_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.sendMessage());\n    });\n    i0.ɵɵtext(27, \"Send Message\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(28, \"div\")(29, \"input\", 13);\n    i0.ɵɵlistener(\"ngModelChange\", function AppComponent_div_1_Template_input_ngModelChange_29_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.searchQuery = $event);\n    })(\"keyup.enter\", function AppComponent_div_1_Template_input_keyup_enter_29_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.searchUsers());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_1_Template_button_click_30_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.searchUsers());\n    });\n    i0.ɵɵtext(31, \"Search\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(32, AppComponent_div_1_div_32_Template, 5, 1, \"div\", 0);\n    i0.ɵɵelementStart(33, \"h1\");\n    i0.ɵɵtext(34, \"User List\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(35, \"table\")(36, \"tr\")(37, \"th\");\n    i0.ɵɵtext(38, \"User ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(39, \"th\");\n    i0.ɵɵtext(40, \"User Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(41, \"th\");\n    i0.ɵɵtext(42, \"User Mail\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(43, AppComponent_div_1_tr_43_Template, 7, 3, \"tr\", 15);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(17);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.selectedRecipient);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.users);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.messageContent);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.searchQuery);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.searchResults.length > 0);\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.userList);\n  }\n}\nexport class AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.title = 'coChat';\n    this.userList = [];\n    this.selectedRecipient = '';\n    this.users = ['User1', 'User2', 'User3']; // Replace this with your list of users\n    this.name = '';\n    this.messageContent = '';\n    this.messages = [];\n    this.searchQuery = '';\n    this.searchResults = [];\n  }\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n    this.fetchUserList();\n  }\n  fetchUserList() {\n    this.http.get('http://localhost:8080/api/auth/list').subscribe(response => {\n      this.userList = response;\n    }, error => {\n      console.error('Error fetching user list:', error);\n    });\n  }\n  connect() {\n    this.webSocketAPI._connect();\n  }\n  disconnect() {\n    this.webSocketAPI._disconnect();\n  }\n  // Method to set the user's name during signup\n  setUser(name) {\n    this.name = name;\n  }\n  sendMessage() {\n    if (this.messageContent.trim() === '' || this.selectedRecipient.trim() === '') {\n      return; // Don't send empty messages or if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: this.messageContent\n    }));\n    // Add the sent message to the messages list\n    this.messages.push({\n      sender: this.name,\n      receiver: this.selectedRecipient,\n      content: this.messageContent\n    });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n\n  sendInvitation() {\n    if (this.selectedRecipient.trim() === '') {\n      return; // Don't send invitations if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: \"Invitation from \" + this.name // Customize the invitation content as needed\n    }));\n  }\n\n  searchUsers() {\n    if (!this.searchQuery) {\n      // Empty search query, clear the search results\n      this.searchResults = [];\n      return;\n    }\n    // Call the backend API to retrieve the search results\n    this.http.get(`http://localhost:8080/api/auth/users?userName=${this.searchQuery}`).subscribe(response => {\n      this.searchResults = response;\n      console.log('search results');\n    }, error => {\n      console.error('Error fetching search results:', error);\n    });\n  }\n  sendInvitationn(user) {\n    if (!user || !user.userName) {\n      return; // Invalid user, handle error if needed\n    }\n\n    console.log(\"Sending invitation to user:\", user.userName);\n    // Call the WebSocketAPI to send the invitation\n    this.webSocketAPI._sendInvitation(JSON.stringify({\n      sender: this.name\n    }));\n    // Handle the invitation logic here, e.g., display a notification or confirmation message\n    // You can customize this according to your requirements\n    alert(\"Invitation sent to \" + user.userName);\n  }\n  handleMessage(message) {\n    console.log(\"Message Received from Server :: \", message);\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({\n          sender: parsedMessage.sender,\n          receiver: parsedMessage.recipient,\n          content: parsedMessage.content\n        });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"id\", \"main-content\", 1, \"container\"], [1, \"row\"], [1, \"col-md-6\"], [1, \"form-inline\"], [1, \"form-group\"], [\"for\", \"connect\"], [\"type\", \"button\", 1, \"btn\", \"btn-default\", 3, \"click\"], [\"for\", \"recipient\"], [\"name\", \"recipient\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"message\"], [\"type\", \"text\", \"name\", \"message\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"placeholder\", \"Search for users\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AppComponent_div_0_Template, 2, 0, \"div\", 0);\n      i0.ɵɵtemplate(1, AppComponent_div_1_Template, 44, 6, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.name);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.name);\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["WebSocketAPI","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","user_r5","ɵɵadvance","ɵɵtextInterpolate","ɵɵlistener","AppComponent_div_1_div_32_li_4_Template_button_click_2_listener","restoredCtx","ɵɵrestoreView","_r9","user_r7","$implicit","ctx_r8","ɵɵnextContext","ɵɵresetView","sendInvitationn","ɵɵtextInterpolate1","userName","ɵɵtemplate","AppComponent_div_1_div_32_li_4_Template","ctx_r3","searchResults","user_r10","userId","userMail","AppComponent_div_1_Template_button_click_8_listener","_r12","ctx_r11","connect","AppComponent_div_1_Template_button_click_10_listener","ctx_r13","disconnect","AppComponent_div_1_Template_select_ngModelChange_17_listener","$event","ctx_r14","selectedRecipient","AppComponent_div_1_option_18_Template","AppComponent_div_1_Template_input_ngModelChange_22_listener","ctx_r15","messageContent","AppComponent_div_1_Template_button_click_24_listener","ctx_r16","sendInvitation","AppComponent_div_1_Template_button_click_26_listener","ctx_r17","sendMessage","AppComponent_div_1_Template_input_ngModelChange_29_listener","ctx_r18","searchQuery","AppComponent_div_1_Template_input_keyup_enter_29_listener","ctx_r19","searchUsers","AppComponent_div_1_Template_button_click_30_listener","ctx_r20","AppComponent_div_1_div_32_Template","AppComponent_div_1_tr_43_Template","ctx_r1","users","length","userList","AppComponent","constructor","http","title","name","messages","ngOnInit","webSocketAPI","fetchUserList","get","subscribe","response","error","console","_connect","_disconnect","setUser","trim","_send","JSON","stringify","sender","recipient","content","push","receiver","log","user","_sendInvitation","alert","handleMessage","message","parsedMessage","parse","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","AppComponent_div_0_Template","AppComponent_div_1_Template"],"sources":["C:\\Users\\hp\\coChat\\src\\app\\app.component.ts","C:\\Users\\hp\\coChat\\src\\app\\app.component.html"],"sourcesContent":["/*import { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'coChat';\n  \n  webSocketAPI!: WebSocketAPI;\n  greeting: any;\n  name!: string ;\n  ngOnInit() {\n  //  this.webSocketAPI = new WebSocketAPI(new AppComponent());\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n\n  }\n  connect(){\n    this.webSocketAPI._connect();\n  }\n\n  disconnect(){\n    this.webSocketAPI._disconnect();\n  }\n\n  sendMessage(){\n    this.webSocketAPI._send(this.name);\n  }\n\n  handleMessage(message: any){\n    this.greeting = message;\n  }\n}\n*/\n/*import { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'coChat';\n  \n  webSocketAPI!: WebSocketAPI;\n  selectedRecipient: string = '';\n  users: string[] = ['User1', 'User2', 'User3']; // Replace this with your list of users\n\n  greeting: any;\n  name: string = '';\n  messageContent: string = '';\n  messages: { sender: string, receiver: string, content: string }[] = [];\n\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n  }\n\n  connect(){\n    this.webSocketAPI._connect();\n  }\n\n  disconnect(){\n    this.webSocketAPI._disconnect();\n  }\n // Method to set the user's name during signup\n setUser(name: string) {\n  this.name = name;\n}\n/*  sendMessage(){\n   // this.webSocketAPI._send(this.name);\n    // Add the sent message to the messages list\n    //this.messages.push({ sender: this.name, receiver: 'Server', content: this.name });\n\n    if (this.messageContent.trim() === '') {\n      return; // Don't send empty messages\n    }\n\n    this.webSocketAPI._send(this.messageContent);\n    // Add the sent message to the messages list\n    this.messages.push({ sender: this.name, receiver: 'Server', content: this.messageContent });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n\n  \n\n  handleMessage(message: any){\n    console.log(\"Message Received from Server :: \", message);\n\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({ sender: parsedMessage.sender, receiver: this.name, content: parsedMessage.content });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n}  sendMessage() {\n  if (this.messageContent.trim() === '' || this.selectedRecipient.trim() === '') {\n    return; // Don't send empty messages or if recipient is not selected\n  }\n\n  this.webSocketAPI._send(JSON.stringify({\n    sender: this.name,\n    recipient: this.selectedRecipient,\n    content: this.messageContent\n  }));\n\n  // Add the sent message to the messages list\n  this.messages.push({ sender: this.name, receiver: this.selectedRecipient, content: this.messageContent });\n  this.messageContent = ''; // Clear the message input box after sending\n}\n\nhandleMessage(message: any) {\n  console.log(\"Message Received from Server :: \", message);\n\n  if (typeof message === \"string\") {\n    // Parse the JSON data\n    try {\n      const parsedMessage = JSON.parse(message);\n      // Now you can access properties of the parsed message and handle it accordingly\n      console.log(\"Parsed Message:\", parsedMessage);\n      this.messages.push({ sender: parsedMessage.sender, receiver: parsedMessage.recipient, content: parsedMessage.content });\n    } catch (error) {\n      console.error(\"Error parsing message:\", error);\n    }\n  } else {\n    console.error(\"Invalid message format:\", message);\n  }\n}\n}\n*/\nimport { Component } from '@angular/core';\nimport { WebSocketAPI } from './services/WebSocketAPI';\nimport { HttpClient } from '@angular/common/http';\ninterface User {\n  userId: number;\n  userName: string;\n  userMail: string;\n  // Add more properties as needed\n}\ninterface InvitationMessage {\n  sender: string;\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'coChat';\n  userList: User[] = [];\n  webSocketAPI!: WebSocketAPI;\n  selectedRecipient: string = '';\n  users: string[] = ['User1', 'User2', 'User3']; // Replace this with your list of users\n\n  greeting: any;\n  name: string = '';\n  messageContent: string = '';\n  messages: { sender: string, receiver: string, content: string }[] = [];\n\n  searchQuery: string = '';\n  searchResults: any[] = [];\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit() {\n    this.webSocketAPI = new WebSocketAPI(this); // Pass the current instance of AppComponent\n    this.fetchUserList();\n  }\n  fetchUserList() {\n    this.http.get<User[]>('http://localhost:8080/api/auth/list').subscribe(\n      (response) => {\n        this.userList = response;\n      },\n      (error) => {\n        console.error('Error fetching user list:', error);\n      }\n    );\n  }\n\n  connect() {\n    this.webSocketAPI._connect();\n  }\n\n  disconnect() {\n    this.webSocketAPI._disconnect();\n  }\n\n  // Method to set the user's name during signup\n  setUser(name: string) {\n    this.name = name;\n  }\n\n  sendMessage() {\n    if (this.messageContent.trim() === '' || this.selectedRecipient.trim() === '') {\n      return; // Don't send empty messages or if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: this.messageContent\n    }));\n\n    // Add the sent message to the messages list\n    this.messages.push({ sender: this.name, receiver: this.selectedRecipient, content: this.messageContent });\n    this.messageContent = ''; // Clear the message input box after sending\n  }\n\n  sendInvitation() {\n    if (this.selectedRecipient.trim() === '') {\n      return; // Don't send invitations if the recipient is not selected\n    }\n\n    this.webSocketAPI._send(JSON.stringify({\n      sender: this.name,\n      recipient: this.selectedRecipient,\n      content: \"Invitation from \" + this.name // Customize the invitation content as needed\n    }));\n  }\n\n  searchUsers() {\n    if (!this.searchQuery) {\n      // Empty search query, clear the search results\n      this.searchResults = [];\n      return;\n    }\n\n    // Call the backend API to retrieve the search results\n    this.http.get<any[]>(`http://localhost:8080/api/auth/users?userName=${this.searchQuery}`).subscribe(\n      (response) => {\n        this.searchResults = response;\n        console.log('search results');\n      },\n      (error) => {\n        console.error('Error fetching search results:', error);\n      }\n    );\n  }\n\n  sendInvitationn(user: any) {\n    if (!user || !user.userName) {\n      return; // Invalid user, handle error if needed\n    }\n  \n    console.log(\"Sending invitation to user:\", user.userName);\n  \n    // Call the WebSocketAPI to send the invitation\n    this.webSocketAPI._sendInvitation(JSON.stringify({ sender: this.name }));\n    \n    // Handle the invitation logic here, e.g., display a notification or confirmation message\n    // You can customize this according to your requirements\n    alert(\"Invitation sent to \" + user.userName);\n  }\n\n  handleMessage(message: any) {\n    console.log(\"Message Received from Server :: \", message);\n\n    if (typeof message === \"string\") {\n      // Parse the JSON data\n      try {\n        const parsedMessage = JSON.parse(message);\n        // Now you can access properties of the parsed message and handle it accordingly\n        console.log(\"Parsed Message:\", parsedMessage);\n        this.messages.push({ sender: parsedMessage.sender, receiver: parsedMessage.recipient, content: parsedMessage.content });\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    } else {\n      console.error(\"Invalid message format:\", message);\n    }\n  }\n}\n\n","<!-- The signup form \r\n<div *ngIf=\"!name\">\r\n    <app-register></app-register>\r\n  </div>\r\n  \r\n  <!-- The chat components -->\r\n<!--  <div *ngIf=\"name\">\r\n    <div id=\"main-content\" class=\"container\">\r\n    <!--  <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <h2>Messages:</h2>\r\n          <ul>\r\n            <li *ngFor=\"let message of messages\">\r\n              <strong>From:</strong> {{ message.sender }} |\r\n              <strong>To:</strong> {{ message.receiver }} |\r\n              <strong>Content:</strong> {{ message.content }}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n          <form class=\"form-inline\">\r\n            <div class=\"form-group\">\r\n              <label for=\"connect\">WebSocket connection:</label>\r\n              <button (click)=\"connect()\" class=\"btn btn-default\" type=\"button\">Connect</button>\r\n              <button (click)=\"disconnect()\" class=\"btn btn-default\" type=\"button\">Disconnect</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <form class=\"form-inline\">\r\n            <div class=\"form-group\">\r\n              <label for=\"message\">Enter your message:</label>\r\n              <input type=\"text\" [(ngModel)]=\"messageContent\" class=\"form-control\" name=\"message\"> <br>\r\n            </div>\r\n            <button (click)=\"sendMessage()\" class=\"btn btn-default\" type=\"button\">Send</button>\r\n          </form>\r\n        </div>\r\n      </div>-->\r\n      <!-- ... (existing code) ... -->\r\n<!--\r\n<div class=\"row\">\r\n    <div class=\"col-md-6\">\r\n      <form class=\"form-inline\">\r\n        <div class=\"form-group\">\r\n          <label for=\"connect\">WebSocket connection:</label>\r\n          <button (click)=\"connect()\" class=\"btn btn-default\" type=\"button\">Connect</button>\r\n          <button (click)=\"disconnect()\" class=\"btn btn-default\" type=\"button\">Disconnect</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n    <div class=\"col-md-6\">\r\n      <form class=\"form-inline\">\r\n        <div class=\"form-group\">\r\n          <label for=\"recipient\">Select recipient:</label>\r\n          <select [(ngModel)]=\"selectedRecipient\" class=\"form-control\" name=\"recipient\">\r\n            <option *ngFor=\"let user of users\" [value]=\"user\">{{ user }}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"message\">Enter your message:</label>\r\n          <input type=\"text\" [(ngModel)]=\"messageContent\" class=\"form-control\" name=\"message\"> <br>\r\n        </div>\r\n        <button (click)=\"sendMessage()\" class=\"btn btn-default\" type=\"button\">Send</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n  \r\n  \r\n  \r\n    </div>\r\n  </div>\r\n-->\r\n<!-- The signup form -->\r\n<div *ngIf=\"!name\">\r\n  <app-register></app-register>\r\n</div>\r\n\r\n<!-- The chat components -->\r\n<div *ngIf=\"name\">\r\n  <div id=\"main-content\" class=\"container\">\r\n    <!-- ... (existing code) ... -->\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6\">\r\n        <form class=\"form-inline\">\r\n          <div class=\"form-group\">\r\n            <label for=\"connect\">WebSocket connection:</label>\r\n            <button (click)=\"connect()\" class=\"btn btn-default\" type=\"button\">Connect</button>\r\n            <button (click)=\"disconnect()\" class=\"btn btn-default\" type=\"button\">Disconnect</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <form class=\"form-inline\">\r\n          <div class=\"form-group\">\r\n            <label for=\"recipient\">Select recipient:</label>\r\n            <select [(ngModel)]=\"selectedRecipient\" class=\"form-control\" name=\"recipient\">\r\n              <option *ngFor=\"let user of users\" [value]=\"user\">{{ user }}</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"message\">Enter your message:</label>\r\n            <input type=\"text\" [(ngModel)]=\"messageContent\" class=\"form-control\" name=\"message\"> <br>\r\n          </div>\r\n          <button (click)=\"sendInvitation()\" class=\"btn btn-default\" type=\"button\">Send Invitation</button>\r\n          <button (click)=\"sendMessage()\" class=\"btn btn-default\" type=\"button\">Send Message</button>\r\n        </form>\r\n      </div>\r\n     \r\n\r\n\r\n      \r\n      <!-- <div>\r\n        <input type=\"text\" [(ngModel)]=\"searchQuery\" (keyup.enter)=\"searchUsers()\" placeholder=\"Search for users\">\r\n        <button (click)=\"searchUsers()\">Search</button>\r\n      </div>\r\n      \r\n      Display search results \r\n      <div *ngIf=\"searchResults.length > 0\">\r\n        <h2>Search Results:</h2>\r\n        <ul>\r\n          <li *ngFor=\"let user of searchResults\">\r\n            {{ user.name }} ({{ user.userName }})\r\n            <button (click)=\"sendInvitationn(user)\">Invite</button>\r\n          </li>\r\n        </ul>\r\n      </div>-->\r\n       <!-- Search bar -->\r\n    <div>\r\n      <input type=\"text\" [(ngModel)]=\"searchQuery\" (keyup.enter)=\"searchUsers()\" placeholder=\"Search for users\">\r\n      <button (click)=\"searchUsers()\">Search</button>\r\n    </div>\r\n\r\n    <!-- Display search results -->\r\n    <div *ngIf=\"searchResults.length > 0\">\r\n      <h2>Search Results:</h2>\r\n      <ul>\r\n        <li *ngFor=\"let user of searchResults\">\r\n          {{ user.userName }}\r\n          <button (click)=\"sendInvitationn(user)\">Invite</button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <h1>User List</h1>\r\n<table>\r\n  <tr>\r\n    <th>User ID</th>\r\n    <th>User Name</th>\r\n    <th>User Mail</th>\r\n    <!-- Add more columns here as needed -->\r\n  </tr>\r\n  <tr *ngFor=\"let user of userList\">\r\n    <td>{{ user.userId }}</td>\r\n    <td>{{ user.userName }}</td>\r\n    <td>{{ user.userMail }}</td>\r\n    <!-- Add more columns here as needed -->\r\n  </tr>\r\n</table>\r\n\r\n\r\n\r\n    </div>\r\n    <!-- ... (existing code) ... -->\r\n  </div>\r\n</div>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}